
ntxVars.constantFunctions := {

// localization
LocObj: func(obj, path)
	begin
	if not vars.kSyntaxCheck then
		begin
		if not vars.locRoot exists then
			Throw('|evt.ex.msg|, "No localization frame specified.");
		if not locRoot.english exists then
			locRoot.english := {};
		if locRoot.english.(path) exists then
			begin
			local pp := locRoot.english.(path);
			if ClassOf(obj) = 'string and ClassOf(pp) = 'string and Length(obj) <> Length(pp) then
				begin
				local err := Stringer(foreach x in path collect x & ".");
				err[length(err) div 2 - 2] := $ ;
				Throw('|evt.ex.msg|, "Localization string for path '" & err & " redefined as: " & obj)
				end
			end;
		locRoot.english.(path) := obj;
		if locRoot.(language) exists then
			begin
			if locRoot.(language).(path) exists then
				locRoot.(language).(path)	// this is the expression thatâ€™s returned
			else
				Throw('|evt.ex.msg|, "Localization frame for " & language & " has no entry at " & path));
			end
		else
			Throw('|evt.ex.msg|, "Localization frame has no entry for language " & language)
		end
	end,

GetDateStringSpec: func(elemArray)
	begin
	local spec := 0;
	foreach val in elemArray do
		spec := spec << 6 + val[1] << 3 + val[0];
	spec
	end,

// build
GetLayout: func(filename)
	begin
	if not vars.kSyntaxCheck then
		try
			call Compile("|Layout_" & filename & "|") with ()
		onexception |evt.ex| do
			Throw('|evt.ex.msg|, "The file " & filename & " has not been processed yet.")
	end,

// units
UnitReference: func(unitName, memberName)
	begin
	_UnitManager:Dispatch('UnitReference, [unitName, memberName])
	end,

UR: func(unitName, memberName)
	begin
	_UnitManager:Dispatch('UnitReference, [unitName, memberName])
	end,

// text style
tsSize: func(num)	num << 10,

// view frames
vfPen: func(x)		x * 256,
vfInset: func(x)	x * 65536,
vfShadow: func(x)	x * 262144,
vfRound: func(x)	x * 16777216,

// view fx
fxColumns: func(num)		 num - 1,
fxRows: func(num)			(num - 1) << 5,
fxSteps: func(num)		(num - 1) << 21,
fxStepTime: func(num)	 num << 25,

// bounds
pureRelBounds: func(l, t, w, h)	{left: l, top: t, right: l + w, bottom: t + h},
pureSetBounds: func(l, t, r, b)	{left: l, top: t, right: r,     bottom: b},

ButtonBounds: func(width)
	begin
	if width > 0 then
		SetBounds(7, 2, 7 + width, 15)
	else
		SetBounds(25, 2, 25 - width, 15)
	end,

PictBounds: func(rsrcName, l, t)
	begin
	local pict := GetNamedResource("PICT", rsrcName, 'rawPICT);
	if pict then
		SetBounds(l, t, l + ExtractWord(pict, 8) - ExtractWord(pict, 4), t + ExtractWord(pict, 6) - ExtractWord(pict, 2))
	end

};
