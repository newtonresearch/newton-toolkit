NTK Platform File FunctionsNTK Platform File Functions1Introduction1Using Platform File Functions1Infrared Communications1OpenRemoteControl2CloseRemoteControl2SendRemoteControlCode2Extras Drawer3GetPartCursor3GetPartEntryData4LaunchPartEntry4SetExtrasInfo5AddExtraIcon6Miscellaneous7CardFileSafeRemoveLayout7GetCalendarMeetingTypes7GetCalendarMeetingTypeInfo7GetPrinterName8MissingImports8RegGlobalKeyboard9UnRegGlobalKeyboard10RegNamesRouteScript10UnRegNamesRouteScript11ShowBusyBox11SupplantSoupDef12ViewIsOpen12Summary of Functions12	Apple Computer, Inc.© <$year>, Apple Computer, Inc.All rights reserved. No part of this publication or the software described in it may be reproduced, stored in a retrieval system, or transmitted, in any form or by any means, mechanical, electronic, photocopying, recording, or otherwise, without prior written permission of Apple Computer, Inc., except in the normal use of the software or to make a backup copy of the software. The same proprietary and copyright notices must be affixed to any permitted copies as were affixed to the original. This exception does not allow copies to be made for others, whether or not sold, but all of the material purchased (with all backup copies) may be sold, given, or loaned to another person. Under the law, copying includes translating into another language or format. You may use the software on any computer owned by you, but extra copies cannot be made for this purpose. Printed in the United States of America.The Apple logo is a registered trademark of Apple Computer, Inc. Use of the “keyboard” Apple logo (Option-Shift-K) for commercial purposes without the prior written consent of Apple may constitute trademark infringement and unfair competition in violation of federal and state laws.No licenses, express or implied, are granted with respect to any of the technology described in this book. Apple retains all intellectual property rights associated with the technology described in this book. This book is intended to assist application developers to develop applications only for licensed Newton platforms.Apple Computer, Inc.1 Infinite LoopCupertino, CA 95014408-996-1010Apple, the Apple logo, APDA, AppleLink, AppleTalk, eWorld, LaserWriter, the light bulb logo, Macintosh, MessagePad, Newton, and Newton Connection Kit are trademarks of Apple Computer, Inc., registered in the United States and other countries.NewtonScript, Newton Toolkit, and ResEdit are trademarks of Apple Computer, Inc.Simultaneously published in the United States and Canada.LIMITED WARRANTY ON MEDIA AND REPLACEMENTIf you discover physical defects in the manual or in the media on which a software product is distributed, APDA will replace the media or manual at no charge to you provided you return the item to be replaced with proof of purchase to APDA.ALL IMPLIED WARRANTIES ON THIS MANUAL, INCLUDING IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, ARE LIMITED IN DURATION TO NINETY (90) DAYS FROM THE DATE OF THE ORIGINAL RETAIL PURCHASE OF THIS PRODUCT.Even though Apple has reviewed this manual, APPLE MAKES NO WARRANTY OR REPRESENTATION, EITHER EXPRESS OR IMPLIED, WITH RESPECT TO THIS MANUAL, ITS QUALITY, ACCURACY, MERCHANTABILITY, OR FITNESS FOR A PARTICULAR PURPOSE. AS A RESULT, THIS MANUAL IS SOLD “AS IS,” AND YOU, THE PURCHASER, ARE ASSUMING THE ENTIRE RISK AS TO ITS QUALITY AND ACCURACY.IN NO EVENT WILL APPLE BE LIABLE FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES RESULTING FROM ANY DEFECT OR INACCURACY IN THIS MANUAL, even if advised of the possibility of such damages.THE WARRANTY AND REMEDIES SET FORTH ABOVE ARE EXCLUSIVE AND IN LIEU OF ALL OTHERS, ORAL OR WRITTEN, EXPRESS OR IMPLIED. No Apple dealer, agent, or employee is authorized to make any modification, extension, or addition to this warranty.Some states do not allow the exclusion or limitation of implied warranties or liability for incidental or consequential damages, so the above limitation or exclusion may not apply to you. This warranty gives you specific legal rights, and you may also have other rights which vary from state to state.11/95IntroductionThe platform files—stored in a folder named Platforms in the same folder as NTK—contain data tailored to different Newton products and a collection of Newton system definitions. The platform files also contain a number of utility functions and definitions for constants that reference them.This document describes the additional functions provided by the NTK platform files that were not previously documented in the Newton Programmer’s Guide. However, those platform file functions that are included in the Newton Programmer’s Guide are listed at the end of this document in the section “Summary of Functions,” for completeness. This document contains a brief description of how to call these platform file functions, and then the functions are described, grouped by topic. A summary of functions follows at the end of the document.Using Platform File FunctionsThe constant that represents a function is the function name with the prefix k and the suffix Func (that is, kfunctionnameFunc).The platform file functions are available at compile time; you can make them available at run time by incorporating them into your application in the following way. Call the function with the NewtonScript call syntax or the Apply function. This strategy saves space and time, because it does not require a slot in the base view and avoids inheritance lookup; it also works in code that doesn’t have access to your base view, such as the application RemoveScript function.Here is an example of using the call syntax to call a platform file function:call kNewInfoFunc with (arg1, arg2);Here is an example of using the Apply function to call a platform file function:Apply(kNewInfoFunc, [arg1, arg2]);Infrared CommunicationsFor more information on using these infrared communications functions, see the Communications Q&A document and the sample code.These remote control functions allow the Newton device to act as an infrared remote control, like the one that controls your television or stereo. OpenRemoteControlIRconnectionID:= OpenRemoteControl()Call this function once to initialize the remote control functions. It returns an object, IRconnectionID, that must be passed to subsequent remote control calls, or it returns nil if the initialization failed.CloseRemoteControlCloseRemoteControl(IRconnectionID)Call this function once when all remote control operations are completed, to free the memory used for remote control communications.IRconnectionID	The object returned from OpenRemoteControl.This function always returns nil. IRconnectionID is invalid after this call returns.SendRemoteControlCodeSendRemoteControlCode(IRconnectionID, command, count)Sends a remote control command through the infrared module.IRconnectionID	The object returned from OpenRemoteControl.command	The remote control command. This is not a NewtonScript object, but simply a series of raw bytes. The command structure is described below.count	The number of times to send command. You must specify at least 1.This function returns nil, after the command has been sent count times.Each remote control command has the following C structure:struct IRCodeWord {	unsigned long name;	unsigned long timeBase;	unsigned long leadIn;	unsigned long repeat;	unsigned long leadOut;	unsigned long count;	unsigned long transitions[];};Here’s a description of these fields:name	Identifies the command code. You can set this value to anything you like.timeBase	The time base in microseconds. This sets the bit time base.leadIn	Duration in timeBase units of the lead bit cell.repeat	Duration in timeBase units of the last bit cell for loop commands. This field is used only when the command is sent multiple timesleadOut	Duration in timeBase units of the last bit cell for non-loop commands.count	One-based count of transitions following.transitions	Array of transition durations in timeBase units. This data is specific to the particular equipment you intend to control. You should contact the equipment manufacturer for this data.Refer to the IR Remote sample code from Newton DTS for details on how to use the remote control functions. Included with this sample code are example resource files containing the remote control codes for some devices, along with a ResEdit template for creating your own.Extras DrawerThese functions operate on the Extras Drawer.GetPartCursorGetPartCursor(packageName, store, folderSym)Returns a cursor for entries corresponding to parts (icons) displayed in the Extras Drawer.packageName	Specify a string naming a package, or nil. If you specify a package name, the cursor returns parts only from that package. To return parts from all packages, specify nil.store	Specify a store object or nil. If you specify a store object, the cursor returns parts only from that store. To return parts from all stores, specify nil.folderSym	Specify a symbol identifying a folder, or nil. If you specify a folder symbol, the cursor returns parts only filed within that Extras Drawer folder. To return parts from all folders, specify the symbol '_all. To return parts from the unfiled folder, specify nil.The structure of the entries returned by the cursor is subject to change. Entries should be accessed only by using the functions GetPartEntryData, LaunchPartEntry, and SetExtrasInfo. Do not directly change the entries returned by GetPartCursor.NoteThis function exists only in the Newton 2.0 platform file and works only on Newton 2.0 units.uGetPartEntryDataGetPartEntryData(entry)Returns a frame containing information about an Extras Drawer part entry.entry	An entry obtained from a part cursor (by using GetPartCursor).The frame returned has the following slots.Slot descriptionsicon	A bitmap frame (of the kind returned by GetPictAsBits) containing the bitmap for the part icon displayed in the Extras Drawer.text	A string that is the text shown under the part icon.labels	A symbol identifying the Extras Drawer folder in which the part is filed. If this slot is nil, the part is unfiled.appSymbol	A symbol identifying the application, if the part frame has an app slot.packageName	A string that is the name of the package which contains the part.NoteThis function exists only in the Newton 2.0 platform file and works only on Newton 2.0 units.uLaunchPartEntryLaunchPartEntry(entry)Launches the specified part. The operation is the equivalent of the user tapping the part icon in the Extras Drawer.entry	An entry obtained from a part cursor (by using GetPartCursor).This function returns a non-nil value if the Extras Drawer would have closed itself after the icon was tapped. This function returns nil if the Extras Drawer would have stayed open after the icon was tapped.NoteThis function exists only in the Newton 2.0 platform file and works only on Newton 2.0 units.uSetExtrasInfoSetExtrasInfo(paramFrame, newInfo)Changes the extras drawer information for the specified Extras Drawer icon. The return value of this function is the information frame that was in effect before this call. If the icon isn’t found, this function returns nil.paramFrame	A frame identifying the icon whose Extras Drawer information you want to change. This frame can have the following slots:appSymbol	Required. A symbol identifying the application that the icon represents.store	Optional. A store object identifying the store on which the icon resides.packageNameOptional. A string naming the package to which the icon belongs.	Alternately, you can specify just an appSymbol for the paramFrame parameter, or you can specify an entry obtained from a part cursor (by using GetPartCursor).newInfo	A new information frame for the icon represented by paramFrame. The slots in this frame are described below. If you don’t specify a particular slot (or specify nil), the value of that slot is not changed.You can read and modify the following slots in the newInfo frame.Slot descriptionsicon	A bitmap frame (of the kind returned by GetPictAsBits) containing the bitmap for the part icon displayed in the Extras Drawer.text	A string that is the text shown under the part icon.labels	A symbol identifying the Extras Drawer folder in which to file the icon. Do not specify nil.soupNames	An array of strings that are the names of soups to be associated with this icon. This slot applies to soup icons only.ownerApp	The appSymbol of the application that owns the soups. This slot applies to soup icons only.NoteThis function exists in both the Newton 2.0 platform file and the MessagePad platform file, however it is implemented differently on each platform. This description applies only to the Newton 2.0 platform.uAddExtraIconAddExtraIcon(extraType, paramFrame, packageName, store)Adds an icon to the Extras Drawer. You can use this function to add an icon that represents several soups created by your application, for example. You can also add an icon that simply executes a function object when tapped.extraType	Specify a symbol identifying the type of icon to add. You can specify 'soupEntry to add a soup icon, or 'scriptEntry to add a script icon.paramFrame	Specify a frame containing information to be used in creating the icon. See the descriptions of slots below.packageName	Specify a string naming a package with which this icon should be associated. If this package is removed from the Newton device, the icon you added will also be removed. For an icon of type 'soupEntry, you should specify a package name different from your application. This prevents your soup icon from being removed if the application is on a card and the card is removed.store	Specify a store object on which the part entry should reside.This function returns a frame that is the entry added to the Extras Drawer.This function does not check if your icon already exists before adding it. You must check to be sure it doesn’t already exist.Here’s a description of the slots in the paramFrame parameter:Slot descriptionstext	Required. A string that is the text shown under the icon.icon	Recommended. A bitmap frame (of the kind returned by GetPictAsBits) containing the bitmap for the icon displayed in the Extras Drawer.app	Recommended. A symbol used by SetExtrasInfo to find the icon.labels	Optional. A symbol identifying the Extras Drawer folder in which to file the icon. Do not specify nil.ownerApp	Optional. The appSymbol of the application that owns the soups. This slot is used only if the icon is of type 'soupEntry.soupNames	Optional. An array of strings that are the names of soups to be associated with this icon. This slot is used only if the icon is of type 'soupEntry.tapAction	Optional. A function object that is called if this icon is of type 'scriptEntry and the user taps it. This function is passed no parameters. This function is stored in a soup. You should keep it as small as possible.NoteThis function exists only in the Newton 2.0 platform file and works only on Newton 2.0 units.uMiscellaneousThis section describes other functions.CardFileSafeRemoveLayoutCardFileSafeRemoveLayout(layout)Safely removes a cardfile layout from the Names application. (Cardfile layouts appear on the Show menu in the Names application.) You should use this function instead of the cardfile method RemoveLayout to remove a cardfile layout. Using this function avoids “Reinsert the card” warnings.layout	A symbol identifying the cardfile layout you want to remove. This is the same symbol you passed to the cardfile method AddLayout to add the layout.The return value of this function is undefined; do not rely on it.NoteThis function exists only in the Newton 2.0 platform file and works only on Newton 2.0 units.uGetCalendarMeetingTypesGetCalendarMeetingTypes()Returns an array of symbols that identify all of the meeting types registered with the Dates application (calendar). The array includes both built-in meeting types and any new types registered through the use of RegMeetingType.NoteThis function exists only in the Newton 2.0 platform file and works only on Newton 2.0 units.uGetCalendarMeetingTypeInfoGetCalendarMeetingTypeInfo(typeSymbol)Returns a frame of information about a particular meeting type. If the specified type is not found, then nil is returned.typeSymbol	A symbol identifying a meeting type registered with the Dates application. Specify one of the symbols returned by GetCalendarMeetingTypes.The returned frame contains the following slots.Slot descriptionslabel	A string that is the text displayed in the New menu for this meeting type.icon	A bitmap frame (of the kind returned by GetPictAsBits) containing the bitmap that is displayed in the New menu for this meeting type.smallIcon	A bitmap frame containing the bitmap that is displayed in the meeting slip for this meeting type.shape	A shape object containing the icon bitmap.memory	A symbol under which the most recently used meeting title strings are stored. (These are stored and accessed using the functions AddMemoryItem and GetMemoryItems.)NoteThis function exists only in the Newton 2.0 platform file and works only on Newton 2.0 units.uGetPrinterNameGetPrinterName(printerFrame)Retrieves the name of the printer, given a printer frame object.printerFrame	A printer frame object. The only valid method for obtaining a printer frame object is to retrieve it from the system userConfiguration frame with the GetUserConfig function. Do not try to construct the slots of this frame yourself because different types of printer drivers require different slots.This function returns a string representing the name of the printer associated with printerFrame.Here is an example of some code that retrieves the name of the current printer:printerFrame := GetUserConfig('currentPrinter);thePrinterName := call kGetPrinterNameFunc with (printerFrame);MissingImportsMissingImports(pkgRef)Returns an array of frames describing units used by a package that are not currently available. If no units are missing, nil is returned.pkgRef	A package reference identifying the package for which this function returns information. You can obtain a package reference by using the functions ObjectPkgRef or GetPkgRef.In the array that is returned, each frame has the following slots.Slot descriptionsname	A symbol identifying the unit.major	The unit major version number.minor	The unit minor version number.Refer to the Newton DTS sample code for details on how to use this function and the unit import and export mechanism.NoteThis function exists only in the Newton 2.0 platform file and works only on Newton 2.0 units.uRegGlobalKeyboardRegGlobalKeyboard(kbdSymbol, kbdTemplate)Replaces the alphanumeric keyboard in the system with a custom keyboard. Anytime the alphanumeric keyboard would have been opened, the custom keyboard will be opened instead.kbdSymbol	A unique symbol identifying the keyboard view. You should append your developer signature to ensure that this symbol is unique.kbdTemplate	A view template that is the new keyboard you are registering. This template must include a slot named preAllocatedContext whose value is set to the symbol 'alphaKeyboard. This template must also include a slot named userName whose value is a string naming the keyboard. This is the keyboard name that the user sees in keyboard pickers.This function returns the keyboard view, if it was successfully instantiated and installed in the system; otherwise, it returns nil. The keyboard view will be created as a child of the root view.In your custom keyboard, you might want to include a button that opens the Personal Word List. That’s the user’s dictionary of personal words. The standard alphanumeric keyboard includes a button that opens the Personal Word List. To do this, include your own button in your keyboard template (don’t use the bitmap from the ROM), and if the user taps it, execute code like this:If GetRoot().reviewdict then	begin	GetRoot().reviewdict:Open();	base:Close();	end;NoteThis function exists only in the Newton 2.0 platform file and works only on Newton 2.0 units.uUnRegGlobalKeyboardUnRegGlobalKeyboard(kbdSymbol)Unregisters a custom keyboard that you registered with RegGlobalKeyboard.kbdSymbol	A symbol identifying the keyboard to unregister.This function returns nil.This function restores the original keyboard that you replaced in the system. It closes the custom keyboard, if it is open when this function is called, but this function does not open the original keyboard that was replaced.NoteThis function exists only in the Newton 2.0 platform file and works only on Newton 2.0 units.uRegNamesRouteScriptRegNamesRouteScript(symbol, routeScriptFrame)Adds an application-defined action to the Action picker in the Names application.symbol	A unique symbol identifying the action you are adding. You should append your developer signature to ensure that this symbol is unique.routeScriptFrame	A frame describing the routing action, as described in Chapter 2, “Routing Interface,” of Newton Programmer’s Guide: Communications. A summary of this frame is described below.The return value of this function is undefined; do not rely on it.Here’s a summary of the routeScriptFrame parameter:{title: string,							// string name of picker itemicon: bitmap object,							// icon for picker itemRouteScript: symbol,							// func called if this action chosenappSymbol: symbol,							// symbol for context of RouteScriptGetTitle: function							// supplied instead of title slot...							// other slots used by your app}Here’s an example of using the RegNamesRouteScript function:call kRegNamesRouteScriptFunc with ('|EntryDumper:PIEDTS|,	{	GetTitle: func(target) begin			if GetTargetCursor(target, nil):entry() then				"Dump entry";			else				nil;	// no selections, so don't show in list		end,		icon: nil,		RouteScript: func(target, targetView) begin			local curs:=GetTargetCursor(target, nil);			local e := curs:Entry();			while e do begin				print(e);				e:=curs:Next();			end;		end	});NoteThis function exists only in the Newton 2.0 platform file and works only on Newton 2.0 units.uUnRegNamesRouteScriptUnRegNamesRouteScript(symbol)Removes an application-defined action from the Action picker in the Names application. This function only removes actions added by RegNameRouteScript.symbol	A symbol identifying the action you are removing.The return value of this function is undefined; do not rely on it.Here’s an example of using the UnRegNamesRouteScript function:call kUnRegNamesRouteScriptFunc with ('|EntryDumper:PIEDTS|);NoteThis function exists only in the Newton 2.0 platform file and works only on Newton 2.0 units.uShowBusyBoxShowBusyBox(showIt)Shows or hides the system busy icon.showIt	A Boolean that specifies whether to show or hide the system busy icon. Specify true to show the busy icon until control returns to the system. Specify nil to hide the busy icon for the rest of the current iteration of the system event loop.The return value of this function is undefined; do not rely on it.NoteThis function exists only in the Newton 2.0 platform file and works only on Newton 2.0 units.uSupplantSoupDefSupplantSoupDef(soup, newDef)Creates or replaces the soup definition frame for a soup.soup	A soup object.newDef	The new soup definition frame you want to set for the soup.The return value of this function is undefined; do not rely on it.WARNING	Changing a soup definition frame is not recommended. You should use this function only if you know exactly what you are doing and know that it will not cause errors or undesirable side effects. Some situations where this function might be useful are adding a soup definition to a 1.x version soup, and renaming a soup.sNoteThis function exists only in the Newton 2.0 platform file and works only on Newton 2.0 units.uViewIsOpenViewIsOpen(view)Returns true if the view is open and nil if it is not.view	The view you wish to check.Note that a view can be open but not visible (if it is hidden).This function is a better way to check if a view is open, rather than checking if the viewCObject slot is non-nil.Summary of FunctionsThis section contains a summary of all the functions provided by the platform files, including those functions documented previously in Newton Programmer’s Guide: System Software.Infrared CommunicationsIRconnectionID:= OpenRemoteControl()CloseRemoteControl(IRconnectionID)SendRemoteControlCode(IRconnectionID, command, count)Extras DrawerGetPartCursor(packageName, store, folderSym)GetPartEntryData(entry)LaunchPartEntry(entry)SetExtrasInfo(paramFrame, newInfo)AddExtraIcon(extraType, paramFrame, packageName, store)MiscellaneousCardFileSafeRemoveLayout(layout)GetCalendarMeetingTypes()GetCalendarMeetingTypeInfo(typeSymbol)GetPrinterName(printerFrame)MissingImports(pkgRef)RegGlobalKeyboard(kbdSymbol, kbdTemplate)UnRegGlobalKeyboard(kbdSymbol)RegNamesRouteScript(symbol, routeScriptFrame)UnRegNamesRouteScript(symbol)ShowBusyBox(showIt)SupplantSoupDef(soup, newDef)ViewIsOpen(view)Functions Documented in Newton Programmer’s Guide: System SoftwareGetLanguageEnvironment()AddLocale(theLocaleBundle)FindLocale(titleString)RemoveLocale(locSymbol)Obsolete FunctionsThe following functions are supplied in the MessagePad platform file, but are obsolete in the Newton 2.0 platform file. They are still supported in Newton 2.0 under different names (“Deprecated” is appended), but it is recommended that you do not use them. In most cases, these platform file functions have been replaced by ROM functions in Newton 2.0, or in some cases, they no longer apply to Newton 2.0.MessagePad name	Newton 2.0 name (obsolete)	AddAlarm	AddAlarmDeprecated	ClearSelectionHilites	ClearSelectionHilitesDeprecated	FlushUserConfig	FlushUserConfigDeprecated	GetAlarm	GetAlarmDeprecated	GetAppAlarmKeys	GetAppAlarmKeysDeprecated	GetDefaultStore	GetDefaultStoreDeprecated	GetUserConfig	GetUserConfigDeprecated	PtInBitMap	PtInBitMapDeprecated	RegFindApps	RegFindAppsDeprecated	RegFormulas	RegFormulasDeprecated	RegisterCardSoup	RegisterCardSoupDeprecated	RegPrefs	RegPrefsDeprecated	RemoveAlarm	RemoveAlarmDeprecated	RemoveAppAlarms	RemoveAppAlarmsDeprecated	Send	SendDeprecated	SetDefaultStore	SetDefaultStoreDeprecated	SetExtrasInfo	SetExtrasInfoDeprecated	SetUserConfig	SetUserConfigDeprecated	SimpleTextHeight	SimpleTextHeightDeprecated	UnionSoupIsNull	UnionSoupIsNullDeprecated	UnRegFindApps	UnRegFindAppsDeprecated	UnRegFormulas	UnRegFormulasDeprecated	UnRegisterCardSoup	UnRegisterCardSoupDeprecated	UnRegPrefs	UnRegPrefsDeprecated	 ˆ    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç ,  Palatino        .     +Ã0  
 ˙ Z2 
         4 ˚ Z2 p  Z( Z(  
ˇ·ˇ‚7Ç      ˇˇ≥> ˇ◊ ° d ONLN d  
 Z/– (& ZNTK Platform File Functions 4í ÃÍ( ˇ	d    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4⁄ Ã˙( ,  Palatino       
 .     Ñ` (‡iii 4 ^ Z¿(  
 y Z( 4 y Z( p  Z. Z.  
ˇ·ˇ‚7Ç      ˇˇu÷ ˇÆ ° d ONLN d   Z Ã w ( p ÃNTK Platform File Functions   ä* ( p1    
         ° d ONLN d  Ã' ‹ ($ ÃIntr  ∑@ ° d ONLN d # ‹' )oduction 1Ä ° d ONLN d -' )<1  ° d ONLN d /( Ã4P (1 ÃUsing Platform File Functions ¡Ä ° d ONLN d N(d4i )ò1  ° d ONLN d P5 ÃA Â (> ÃInfrar  ª` ° d ONLN d V5 ÂA> )ed Communications  5  ° d ONLN d i5SAX )n1  ° d ONLN d kB ÍNF (K ÍOpenRemoteControl ∂‡ ° d ONLN d ~BZN_ )p2  ° d ONLN d ÄN ÍZF (W ÍCloseRemoteControl  π` ° d ONLN d îNZZ_ )p2  ° d ONLN d ñZ Íf[ (c ÍSendRemoteControlCode ¶@ ° d ONLN d ≠Zoft )Ö2  ° d ONLN d Øf Ãr (o ÃExtras Drawer yÄ ° d ONLN d æf r% )T3  ° d ONLN d ¿s Í* (| ÍGetPartCursor !† ° d ONLN d œs?D )U3  ° d ONLN d — Íã9 (à ÍGetPartEntryData  † ° d ONLN d „NãS )d4  ° d ONLN d Âã Íó6 (î ÍLaunchPartEntry •¿ ° d ONLN d ˆãJóO )`4  ° d ONLN d ¯ó Í£$ († ÍSetExtrasInfo {` ° d ONLN dó9£> )O5  ° d ONLN d	£ ÍØ( (¨ ÍAddExtraIcon  ¿ ° d ONLN d£=ØB )S6  ° d ONLN dØ Ãª
 (∏ ÃMiscellaneous y‡ ° d ONLN d(Øª$ )S7  ° d ONLN d*º Í»f (≈ ÍCardFileSafeRemoveLayout  «  ° d ONLN dDºz» )ê7  ° d ONLN dF» Í‘a (— ÍGetCalendarMeetingTypes "@ ° d ONLN d_»v‘{ )å7  ° d ONLN da‘ Í‡o (› ÍGetCalendarMeetingTypeInfo  ﬁÄ ° d ONLN d}‘É‡à )ô7  ° d ONLN d‡ ÍÏ3 (È ÍGetPrinterName  Œ@ ° d ONLN dè‡GÏL )]8  ° d ONLN dëÏ Í¯0 (ı ÍMissingImports  º† ° d ONLN d°ÏD¯I )Z8  ° d ONLN d£¯ ÍD ( ÍRegGlobalKeyboard ú  ° d ONLN d∂¯X] )n9  ° d ONLN d∏ ÍQ ( ÍUnRegGlobalKeyboard 4¿ ° d ONLN dÕfp )|10 ° d ONLN d– ÍN ( ÍRegNamesRouteScript ∂` ° d ONLN dÂbl )x10 ° d ONLN dË Í([ (% ÍUnRegNamesRouteScript O  ° d ONLN dˇp(z )Ü11 ° d ONLN d( Í4) (1 ÍShowBusyBox Ä ° d ONLN d(>4H )T11 ° d ONLN d4 Í@8 (= ÍSupplantSoupDef `Ä ° d ONLN d#4M@W )c12 ° d ONLN d&@ ÍL! (I Í
ViewIsOpen  ’† ° d ONLN d2@5L? )K12 ° d ONLN d5L ÃX0 (U ÃSummary of Functions  @Ä ° d ONLN dKLEXO )y12 ˇ Ñ    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4⁄ <ˇ
 ,  Palatino       
 .     (· <iv  4 ^ <¿
 ˇ'º    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4⁄ Æ˙
 4 ^ <¿ Ã ,  Palatino     
 .     ° d ONLN d   Z < f C +<c   ° d ONLN d  \ H e Ñ )Apple Computer >Ä ° d ONLN d  \ Ñ e î )<, Inc. ° d ONLN dˇˇ         ( n <©   z  ° d ONLN dˇˇ         )1995 z  ° d ONLN dˇˇ         ),  .Ä ° d ONLN dˇˇ         )Apple Computer Ì  ° d ONLN dˇˇ         );, Inc. ° d ONLN d 7 p < y b ( w <All rights r  ˝Ä ° d ONLN d C p b y Å )&	eserved.   ° d ONLN d M { < Ñ ≤ ( Ç <#No part of this publication or the  ° d ONLN d p Ñ < ç V *	softwar  8Ä ° d ONLN d w Ñ W ç ¨ )e described in it may be   ° d ONLN d ê ç < ñ ? ( î <r ÑÄ ° d ONLN d ë ç ? ñ J )epr  -  ° d ONLN d î ç K ñ v )oduced, stor ËÄ ° d ONLN d † ç v ñ í )+	ed in a r  °  ° d ONLN d © ç ì ñ Ø )	etrieval   ° d ONLN d ≤ ñ < ü ƒ ( ù <'system, or transmitted, in any form or  ° d ONLN d Ÿ ü < ® ∞ *	 by any means, mechanical, electr éÄ ° d ONLN d ˘ ü ∞ ® ¬ )tonic,  ° d ONLN d ˇ ® < ± t ( Ø <photocopying, r ÔÄ ° d ONLN d ® t ± Ç )8ecor ¥  ° d ONLN d ® É ± « )ding, or otherwise,  ° d ONLN d& ± < ∫ º ( ∏ <$without prior written permission of   ° d ONLN dJ ∫ < √ x *	Apple Computer >Ä ° d ONLN dX ∫ x √ ª )<, Inc., except in the  ° d ONLN dn √ < Ã ñ (   <normal use of the softwar ¯Ä ° d ONLN dá √ ñ Ã … )Ze or to make a   ° d ONLN dñ Ã < ’ ú ( ” <backup copy of the softwar  ïÄ ° d ONLN d∞ Ã ú ’ « )`e. The same  ° d ONLN dº ’ < ﬁ C ( ‹ <pr  SÄ ° d ONLN dæ ’ D ﬁ … )%oprietary and copyright notices must   ° d ONLN d„ ﬁ < Á L ( Â <be af GÄ ° d ONLN dË ﬁ M Á Q )ﬁ  Ä ° d ONLN dÍ ﬁ R Á ø )xed to any permitted copies as   ° d ONLN d	 Á <  I ( Ó <wer Ä ° d ONLN d Á J  V )e af `  ° d ONLN d Á V  Z )ﬁ  7  ° d ONLN d Á [  ∞ )xed to the original. This  ° d ONLN d,  < ˘ ¡ ( ˜ <&exception does not allow copies to be   ° d ONLN dR ˘ < ¡ *	&made for others, whether or not sold,  ° d ONLN dx < ñ *	but all of the material pur  Ä ° d ONLN dì ó ∆ )[chased (with   ° d ONLN d† < ƒ ( <'all backup copies) may be sold, given,  ° d ONLN d« < « *	'or loaned to another person. Under the   ° d ONLN dÓ <& I *	law  ƒ  ° d ONLN dÒ H& ¬ )$, copying includes translating into  ° d ONLN d& </ ° (- <another language or format.   ëÄ ° d ONLN d1& °/ ¶ )eY  +Ä ° d ONLN d2& ¶/ ¬ )ou may   ° d ONLN d9/ <8 r (6 <use the softwar ]Ä ° d ONLN dH/ r8 ∂ )6e on any computer  ° d ONLN dZ8 <A ∆ (? <&owned by you, but extra copies cannot   ° d ONLN dÄA <J ò *	be made for this purpose.  ° d ONLN dõL <U ® * Printed in the United States of  ÃÄ ° d ONLN dªL ®U » )lAmerica. ° d ONLN dƒW <` K (^ <The   òÄ ° d ONLN d»W K` Ö )Apple logo is a r  ÿ  ° d ONLN dŸW Ö` ú ):egister  MÄ ° d ONLN d‡W ù` ß )ed   ° d ONLN d„` <i l (g <trademark of  eÄ ° d ONLN d` li ® )0Apple Computer $  ° d ONLN d˛` ®i ∫ )<, Inc.   ° d ONLN di <r Ç (p <Use of the “keyboar ùÄ ° d ONLN di Çr å )Fd”   5  ° d ONLN di çr ∂ )Apple logo   ° d ONLN d'r <{ ° (y <(Option-Shift-K) for commer êÄ ° d ONLN dBr °{ Ø )ecial   ° d ONLN dG{ <Ñ π (Ç <#purposes without the prior written  ° d ONLN djÑ <ç b *	consent of   LÄ ° d ONLN duÑ bç ∞ )&Apple may constitute   ° d ONLN däç <ñ ∫ (î <"trademark infringement and unfair   ° d ONLN d¨ñ <ü ∆ *	(competition in violation of federal and  ° d ONLN d‘ü <® ` *	state laws.  ° d ONLN d‡™ <≥ x *No licenses, expr  úÄ ° d ONLN dÒ™ x≥ ¥ )<ess or implied, ar X  ° d ONLN d™ µ≥ ∫ )=e  ° d ONLN d≥ <º o (∫ <granted with r  `Ä ° d ONLN d≥ oº µ )3espect to any of the   ° d ONLN d(º <≈ ∑ (√ <#technology described in this book.  ° d ONLN dK≈ <Œ W *	Apple r  ÑÄ ° d ONLN dR≈ WŒ © )etains all intellectual pr   ° d ONLN dl≈ ™Œ √ )Soperty   ° d ONLN dsŒ <◊ ¡ (’ <&rights associated with the technology   ° d ONLN dô◊ <‡ ∫ *	%described in this book. This book is   ° d ONLN dæ‡ <È • *	intended to assist application   ° d ONLN d›È <Ú À *	(developers to develop applications only  ° d ONLN dÚ <˚ ™ *	for licensed Newton platforms. ° d ONLN d$ˇ < x *Apple Computer >Ä ° d ONLN d2ˇ x à )<, Inc. ° d ONLN d9 < N ( <1 Inﬁ ±  ° d ONLN d? N o )	nite Loop  ° d ONLN dI < p ( <Cupertino, CA 6Ä ° d ONLN dV p Ü )4 95014 ° d ONLN d] <# i (! <408-996-1010  ° d ONLN dj' <0 c *Apple, the   MÄ ° d ONLN du' c0 é )'Apple logo,  Ö  ° d ONLN dÅ' é0 © )+APDA,  ° d ONLN dá0 <9 f (7 <AppleLink,  ÜÄ ° d ONLN dí0 f9 Ä )*AppleT ±Ä ° d ONLN dò0 Ä9 ö )alk, eW  ëÄ ° d ONLN dü0 ö9 ¨ )orld,  ° d ONLN d•9 <B W (@ <LaserW  -Ä ° d ONLN d´9 WB f )riter  ≠  ° d ONLN d∞9 eB ≠ ), the light bulb logo,   ° d ONLN d«B <K ≈ (I <#Macintosh, MessagePad, Newton, and  ° d ONLN dÍK <T ô *	Newton Connection Kit ar æÄ ° d ONLN dK ôT … )]e trademarks   ° d ONLN dT <] E ([ <of  <Ä ° d ONLN dT E] Å )	Apple Computer ˚  ° d ONLN d T Ä] ò );	, Inc., r  ÊÄ ° d ONLN d)T ò] Ø )egister  \  ° d ONLN d0T ∞] √ )ed in  ° d ONLN d6] <f ¡ (d <&the United States and other countries.  ° d ONLN d]h <q ï *NewtonScript, Newton T Â  ° d ONLN dsh îq ª )Xoolkit, and  ° d ONLN dq <z ` (x <
ResEdit ar  ÀÄ ° d ONLN dâq `z ô )$e trademarks of  ° d ONLN döz <É x (Å <Apple Computer  >Ä ° d ONLN d®z xÉ à )<, Inc. ° d ONLN dØá <ê À (é <'Simultaneously published in the United  ° d ONLN d÷ê <ô  *	States and Canada. 4 ^ €¿k     ° d ONLN dÈ ] € e ( c €	LIMITED W   ° d ONLN dÚ ] eO )(ARRANTY ON MEDIA öp ° d ONLN d ]O ec )L AND   ° d ONLN d f € n ( l €REPLACEMENT ° d ONLN d s € {U *(If you discover physical defects in the  ° d ONLN d; | € Ñi *	+manual or in the media on which a software   ° d ONLN df Ö € ç9 *	product is distributed, APDA sê ° d ONLN dÇ Ö9 çb )^ will replace  ° d ONLN dê é € ñ\ ( î €(the media or manual at no charge to you   ° d ONLN d∏ ó € üg *	,provided you return the item to be replaced  ° d ONLN d‰ † € ®D *	with proof of purchase to APDA.  ° d ONLN d	 ≠ € µ Ë *ALL  _0 ° d ONLN d	 ≠ È µ )
 IMPLIED W Yê ° d ONLN d	 ≠ µ_ ))ARRANTIES ON THIS  ° d ONLN d	# ∂ € æN ( º €MANUAL, INCLUDING IMPLIED   ° d ONLN d	= ø € « ‚ *	W  ﬂ  ° d ONLN d	> ø · «D )ARRANTIES OF MERCHANT  d  ° d ONLN d	S øD «b )cABILITY  ° d ONLN d	[ » € –# ( Œ €AND FITNESS FOR A Ê∞ ° d ONLN d	l »# –) )H P h¿ ° d ONLN d	n ») –3 )AR ÜP ° d ONLN d	p »3 –U )
TICULAR  ° d ONLN d	x — € ŸQ ( ◊ €PURPOSE, ARE LIMITED IN DURA  ¶  ° d ONLN d	î —Q Ÿe )vTION   ° d ONLN d	ô ⁄ € ‚ ( ‡ €TO NINETY (90) DA iÄ ° d ONLN d	™ ⁄ ‚[ )BYS FROM THE DA À† ° d ONLN d	∏ ⁄Z ‚d )=TE   ° d ONLN d	ª „ € Î ( È €OF THE ORIGINAL ∞ ° d ONLN d	  „ Î, )B RET 30 ° d ONLN d	Œ „, Î8 )AIL  Ö  ° d ONLN d	— „8 Îc )
 PURCHASE  ° d ONLN d	€ Ï € Ù ( Ú €OF THIS PRODUCT æ` ° d ONLN d	Í Ï Ù )B.  ° d ONLN d	Ï ˘ €T ( ˇ €$Even though Apple has reviewed this   ° d ONLN d
 €
? *	manual, APPLE MAKES NO W a@ ° d ONLN d
(?
d )dARRANTY  ° d ONLN d
0 € ( €OR REPRESENT  {¿ ° d ONLN d
< )6A  I  ° d ONLN d
=i )TION, EITHER EXPRESS   ° d ONLN d
R €a ( €!OR IMPLIED, WITH RESPECT TO THIS  ° d ONLN d
s €%. *	MANUAL, ITS QUALITY  f∞ ° d ONLN d
Ü.%Z )S
, ACCURACY õÄ ° d ONLN d
êZ%] ),,  ° d ONLN d
í& €. (, €MERCHANT    ° d ONLN d
ö&.# )+ABILITY  ≠p ° d ONLN d
°&".g ), OR FITNESS FOR A [† ° d ONLN d
≥&h.i )F   ° d ONLN d
¥/ €7 ﬂ (5 €P B ° d ONLN d
µ/ ﬂ7 È )AR _† ° d ONLN d
∑/ È7A )
TICULAR PURPOSE. AS A  Ñê ° d ONLN d
Ã/A7Z )X RESUL ‡ ° d ONLN d
“/Z7^ )T  † ° d ONLN d
”/^7a ),  ° d ONLN d
’8 €@ (> €THIS MANUAL  ° d ONLN d
‡8@` )5 IS SOLD “AS IS,” AND  ° d ONLN d
ˆA €Ij (G €!YOU, THE PURCHASER, ARE ASSUMING  ° d ONLN dJ €Rc *	"THE ENTIRE RISK AS TO ITS QUALITY  ° d ONLN d9S €[ *	AND ACCURACY 0 ° d ONLN dES[ )<.  ° d ONLN dG` €h (f €IN NO EVENT WILL  ùp ° d ONLN dW`h_ )D APPLE BE LIABLE   ° d ONLN dhi €q (o €
FOR DIRECT  ˇ@ ° d ONLN driq- )+
, INDIRECT   ° d ONLN d|i.qS )(, SPECIAL,   ° d ONLN dár €z ˇ (x €INCIDENT  ÃÄ ° d ONLN dèr ˇzX )$AL, OR CONSEQUENTIAL K ° d ONLN d£rYzZ )Z   ° d ONLN d§{ €É (Å €DAMAGES RESUL )– ° d ONLN d±{ÉX )?TING FROM ANY  ° d ONLN døÑ €åV (ä €DEFECT OR INACCURACY IN THIS  ° d ONLN d‹ç €ïj *	+MANUAL, even if advised of the possibility   ° d ONLN dñ €û *	of such damages. ° d ONLN d£ €´ Ú *THE W  e† ° d ONLN d£ Ú´a )ARRANTY AND REMEDIES SET   ° d ONLN d6¨ €¥ È (≤ €FOR Â ° d ONLN d9¨ È¥h )TH ABOVE ARE EXCLUSIVE AND IN  ° d ONLN dWµ €Ω (ª €LIEU OF ALL Q ° d ONLN dbµΩ> ), OTHERS, ORAL  ¸† ° d ONLN doµ>ΩL )7 OR  ° d ONLN dsæ €∆\ (ƒ € WRITTEN, EXPRESS OR IMPLIED. No   ° d ONLN dì« €œ *	Apple dealer Ü0 ° d ONLN dü«œL )), agent, or employee is  ° d ONLN d∑– €ÿ= (÷ €authorized to make any modiﬁ  ° d ONLN d‘–=ÿS )bcation,  ° d ONLN d‹Ÿ €·U (ﬂ €'extension, or addition to this warranty Û` ° d ONLN dŸT·U )y.  ° d ONLN dÊ €Ó` (Ï €*Some states do not allow the exclusion or   ° d ONLN d/Ô €˜g *	.limitation of implied warranties or liability  ° d ONLN d]¯ € g *	,for incidental or consequential damages, so  ° d ONLN dâ €	a *	*the above limitation or exclusion may not  ° d ONLN d≥
 €U *	&apply to you. This warranty gives you  ° d ONLN dŸ € Ô *	speciﬁ ¿ ° d ONLN d‡ f )&c legal rights, and you may also have  ° d ONLN d €$a (" €,other rights which vary from state to state.  ,  	Helvetica        ° d ONLN d3> €G Ô *#11/95  4 ^z¿
 ˇ`    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4⁄ ú˙( ,  	Helvetica    	 .     (‡ úIntroduction  ,  Palatino       
 (‡#1  
 ^ Z x( 4 ^ Z x(  
 à Z ê( 4 â Z ê( p  ä Z ä. ä Z ä.  
ˇ·ˇ‚7Ç      ˇˇ© ˇÆ ° d ONLN d   u Z à t ( É ZIntr  ∏X ° d ONLN d  u t à ¥ )oduction   V˛ ( É 0    
         ° d ONLN d  ô ú • ﬁ ( ¢ úThe platform ﬁ  ` ° d ONLN d  ô ﬂ • )Cles—stor Æ@ ° d ONLN d & ô • )&9ed in a folder named Platforms in the same folder as NTK—  ° d ONLN d _ ¶ ú ≤ Ï ( Ø úcontain data tailor ﬂ  ° d ONLN d r ¶ Ï ≤ )P	ed to dif  ¶† ° d ONLN d { ¶ ≤ )%fer  â  ° d ONLN d ~ ¶ ≤] )ent Newton pr  &` ° d ONLN d ã ¶^ ≤ )A)oducts and a collection of Newton system   ° d ONLN d ¥ ≥ ú ø ¨ ( º údeﬁ r  ° d ONLN d ∏ ≥ ≠ ø )nitions. The platform ﬁ  _‡ ° d ONLN d – ≥ ø˛ )f6les also contain a number of utility functions and deﬁ ’` ° d ONLN d ≥˛ ø )Înitions  ° d ONLN d ¿ ú Ã Ô ( … úfor constants that r  ^` ° d ONLN d# ¿ Ô Ã ˇ )Sefer 
Ä ° d ONLN d' ¿  Ã/ )
ence them. ° d ONLN d2 “ ú ﬁÇ ( € ú3This document describes the additional functions pr ∑  ° d ONLN de “Ç ﬁ )Êovided by the NTK platform ﬁ ´¿ ° d ONLN dÇ “	 ﬁ )áles  ° d ONLN dÜ ﬂ ú Î ¿ ( Ë úthat wer  ;¿ ° d ONLN dé ﬂ ¡ Î „ )%e not pr U¿ ° d ONLN dñ ﬂ „ Î` )"eviously documented in the     † ° d ONLN d± ﬂa Îç )~	Newton Pr  ù† ° d ONLN d∫ ﬂç Î∂ ),ogrammer ‡ ° d ONLN d¬ ﬂ∑ Îπ )*’  PÄ ° d ONLN d√ ﬂπ Î◊ )s Guide     &@ ° d ONLN d  ﬂÿ Î )	. However  ≤‡ ° d ONLN d” ﬂ Î$ )-, those  ° d ONLN d€ Ï ú ¯ À ( ı ú
platform ﬁ  …† ° d ONLN dÊ Ï À ¯ )/le functions that ar b  ° d ONLN d˙ Ï ¯j )Se included in the    ›` ° d ONLN d Ïj ¯ñ )L	Newton Pr  e` ° d ONLN d Ïó ¯¿ )-ogrammer ›† ° d ONLN d Ï¿ ¯¬ ))’  @ ° d ONLN d Ï√ ¯· )s Guide     Ó  ° d ONLN d% Ï· ¯Ï ) ar  3  ° d ONLN d( ÏÌ ¯ )e listed at  ° d ONLN d4 ˘ ú ( úRthe end of this document in the section “Summary of Functions,” for completeness.   ° d ONLN dá ú‚ *JThis document contains a brief description of how to call these platform ﬁ ±  ° d ONLN d“‚ (‚le functions,   ° d ONLN d‡ ú$
 (! úand then the functions ar 	Ä ° d ONLN d˘$K )oe described, gr  Å‡ ° d ONLN dK$í )@ouped by topic.  ±  ° d ONLN dí$ô )GA  Î† ° d ONLN dô$" ) summary of functions follows  ° d ONLN d7% ú1 (. úat the end of the document.  
8 ZS( 49 ZS(  
c Zk( 4d Zk( p e Ze.e Ze.  
ˇ·ˇ‚7Ç   ˇˇ© ˇÆ ° d ONLN dTP Zc1 (^ ZUsing Platform File Functions   V˛ (^ 0    
         ° d ONLN dst úÄ Ó (} úThe constant that r !  ° d ONLN dÜt ÔÄ ˝ )Sepr  ±‡ ° d ONLN dât ˝Ä◊ )2esents a function is the function name with the pr ÿ¿ ° d ONLN dªt◊Ä· )⁄eﬁ Ø  ° d ONLN dæt‚ÄÈ )x  , 
 Courier   W¿ ° d ONLN d¿tÍÔ )k    W` ° d ONLN d¡tÄ )	 and the   ° d ONLN d Å úç © (ä úsuf Í` ° d ONLN dÕÅ ©ç Ø )ﬁ  ˜  ° d ONLN dœÅ Øç ∂ )x    ü¿ ° d ONLN d—Å ∑å Œ )Func   û@ ° d ONLN d’Å œç Ù ) (that is,     m† ° d ONLN d‡Å ıå ˙ )&k      m@ ° d ONLN d·Å ˚ç2 )functionname      )` ° d ONLN dÌÅ3åJ )8Func   '‡ ° d ONLN dÒÅKçP )). ° d ONLN dÙì úü ﬁ (ú úThe platform ﬁ  ` ° d ONLN dì ﬂü )Cle functions ar  «† ° d ONLN dìü% )><e available at compile time; you can make them available at  ° d ONLN dN† ú¨ ü (© úr ^† ° d ONLN dO† †¨Â )Hun time by incorporating them into your application in the following way   ° d ONLN dó†Â¨Í (©Â.     ° d ONLN dô†Í¨ )	Call the   ° d ONLN d¢≠ úπ+ (∂ úfunction with the NewtonScript    á  ° d ONLN d¡≠+∏B )ècall   ÖÄ ° d ONLN d≈≠CπÅ ) syntax or the     ”Ä ° d ONLN d‘≠Å∏û )>Apply    —† ° d ONLN dŸ≠üπ! ) function. This strategy saves   ° d ONLN d¯∫ ú∆= (√ ú%space and time, because it does not r é† ° d ONLN d∫=∆T )°equir  •‡ ° d ONLN d"∫T∆& )1e a slot in the base view and avoids inheritance   ° d ONLN dS« ú”ÿ (– úHlookup; it also works in code that doesn’t have access to your base view  ¯† ° d ONLN dõ«◊” (–◊, such as the   ° d ONLN d©‘ ú‡ – (› úapplication     ∂‡ ° d ONLN dµ‘ –ﬂ )4RemoveScript   ≤` ° d ONLN d¡‘‡B )H
 function. ° d ONLN dÃÊ úÚ ≠ (Ô úHer `  ° d ONLN dœÊ ≠Ú) )e is an example of using the     NÄ ° d ONLN dÏÊ*ÒA )}call   M  ° d ONLN dÊBÚ∑ ) syntax to call a platform ﬁ   ° d ONLN dÊ∏ÚÈ )vle function:   ° d ONLN d˝ ús ( ú$call kNewInfoFunc with (arg1, arg2);    ° d ONLN d? ú ≠ *Her  `  ° d ONLN dB ≠) )e is an example of using the     NÄ ° d ONLN d_*G )}Apply    L† ° d ONLN ddH≈ ) function to call a platform ﬁ ` ° d ONLN dÉ∆˜ )~le function:   ° d ONLN dê' ú2 ø (0 úApply(  }¿ ° d ONLN dñ' ¿2 )$kNewInfoFunc y@ ° d ONLN d¢'2 )H, [  x  ° d ONLN d•'2U )
arg1, arg2 t` ° d ONLN dØ'V2g )<]);   
; ZV( 4< ZV(  
f Zn( 4g Zn( p h Zh.h Zh.  
ˇ·ˇ‚7Ç     ˇˇ© ˇÆ ° d ONLN d¥S Zf É (a ZInfrar  _< ° d ONLN d∫S Éf ))ed Communications    V˛ (a 0    
         ° d ONLN dÕw úÉ ø (Ä úFor mor ¿ ° d ONLN d‘w ¿ÉY )$#e information on using these infrar  á‡ ° d ONLN d˜wYÉ )ô%ed communications functions, see the   ° d ONLN dÑ úê (ç úCommunications Q&A  Ú  ° d ONLN d.Ñêê )e document and the sample code. ° d ONLN dMñ ú¢ º (ü úThese r á` ° d ONLN dTñ º¢  ) emote contr  Â  ° d ONLN d_ñ ¢‰ )48ol functions allow the Newton device to act as an infrar ÌÄ ° d ONLN dóñ‰¢ı )Ùed r ‡ ° d ONLN dõñˆ¢ )emote  ° d ONLN d°£ úØ ≤ (¨ úcontr >Ä ° d ONLN d¶£ ≥Ø  )ol, like the one that contr  »` ° d ONLN d¡£ Øè )mols your television or ster  ê† ° d ONLN d‹£êØü )peo.   
 ^  Ç Z 4 ` & } U      	 ( f &Figure 0  *	T  Â± )ab Øø )
le 0 ˇP    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 4⁄ <˙
 ,  Palatino       
 .     (‡ <2 ,  	Helvetica       	 )BInfr \@ )	ared Comm   )/
unications 4 ^ <¿
  
 g < l
 4 h < l
 p  i ~ i
 i ~ i
  
ˇ·ˇ‚7Ç    
 ° d ONLN d   \ ~ g ÷ ( e ~OpenRemoteContr ,  ° d ONLN d  \ ◊ g ﬂ )Yol   ‡ ( e0       ° d ONLN d  n ~ z æ ( w ~IRconnectionID  , 
 Courier      J‡ ° d ONLN d ! n ø yB )A:= OpenRemoteControl()   ° d ONLN d 8 Ä ~ å, ( â ~+Call this function once to initialize the r q` ° d ONLN d c Ä, å` )Æemote contr  œ  ° d ONLN d n Ä` å¶ )4ol functions. It r ﬁ  ° d ONLN d Ä Ä¶ å )Feturns an object,    ° d ONLN d í ç ~ ô æ ( ñ ~IRconnectionID     J‡ ° d ONLN d † ç ø ôb )A%, that must be passed to subsequent r  {  ° d ONLN d ≈ çb ôñ )£emote contr  ÿ¿ ° d ONLN d – çñ ô— )4ol calls, or it r  åÄ ° d ONLN d · ç“ ô )<eturns      † ° d ONLN d Ë çÒ ò )nil    Ä ° d ONLN d Î ç ô )   ° d ONLN d Ï ö ~ ¶ Ì ( £ ~if the initialization failed.  
 ¿ < ≈
 4 ¡ < ≈
 p  ¬ ~ ¬
 ¬ ~ ¬
  
ˇ·ˇ‚7Ç     ° d ONLN d µ ~ ¿ ÿ *CloseRemoteContr ◊Ä ° d ONLN d µ ÿ ¿ ‡ )Zol   ‡ ( æ0        ° d ONLN d « ~ “ Ô ( – ~CloseRemoteControl(     x‡ ° d ONLN d2 «  ”0 )rIRconnectionID      C¿ ° d ONLN d@ «1 “6 )A)    ° d ONLN dB Ÿ ~ Â ( ‚ ~"Call this function once when all r  â  ° d ONLN dd Ÿ ÂD )íemote contr  Ê† ° d ONLN do ŸD Ââ )4ol operations ar Ï  ° d ONLN d Ÿâ Â÷ )Ee completed, to fr   ° d ONLN dë Ÿ◊ ÂÛ )Nee the   ° d ONLN dò Ê ~ Ú – ( Ô ~memory used for r ` ° d ONLN d© Ê — Ú )Semote contr  q  ° d ONLN d¥ Ê Ú[ )4ol communications.   ° d ONLN d« ¯ ~ æ ( ~IRconnectionID     ° d ONLN d÷ ¯ ⁄ )\The object r –‡ ° d ONLN d‚ ¯9 )3
eturned fr &@ ° d ONLN dÏ ¯:J )-om     Ô¿ ° d ONLN dÔ ¯JØ )OpenRemoteControl    È` ° d ONLN d  ¯∞≤ )f.  ° d ONLN d
 ~ ‡ ( ~This function always r  ˆ@ ° d ONLN d
 ‡ ˛ )beturns     ä` ° d ONLN d
 ˇ )nil    â@ ° d ONLN d"
 ).    ° d ONLN d% ~( æ (% ~IRconnectionID     J‡ ° d ONLN d3 ø(, )A is invalid after this call r  N` ° d ONLN dP,(J )meturns.   
B <G
 4C <G
 p D ~D
D ~D
  
ˇ·ˇ‚7Ç     ° d ONLN dY7 ~B ’ (@ ~SendRemoteContr @ ° d ONLN dh7 ÷B ˜ )XolCode   ‡ (@0        ° d ONLN dpI ~T (R ~SendRemoteControlCode(      w¿ ° d ONLN dÜIUB )ÑIRconnectionID      B† ° d ONLN dîICTN )A,      A‡ ° d ONLN dñIOUv )command       Q‡ ° d ONLN dùIvTÅ )',      Q  ° d ONLN düIÇUò )count       E` ° d ONLN d§IôTû ))    ° d ONLN d¶[ ~g ¶ (d ~	Sends a r xÄ ° d ONLN dØ[ ¶g ⁄ )(emote contr  ÷  ° d ONLN d∫[ ⁄g  )4ol command thr á† ° d ONLN d»[!gc )Gough the infrar  ` ° d ONLN d◊[dgñ )C
ed module.   ° d ONLN d‚m ~y æ (v ~IRconnectionID     ° d ONLN dÒm ⁄y )\The object r –‡ ° d ONLN d˝my9 )3
eturned fr &@ ° d ONLN dm:yJ )-om     Ô¿ ° d ONLN d
mJxØ )OpenRemoteControl    È` ° d ONLN dm∞y≤ )f.    ° d ONLN d ~ã • (à ~command    ° d ONLN d% ⁄ã Ò )\The r  Ä¿ ° d ONLN d* Òã% )emote contr  ﬁ` ° d ONLN d5%ã	 )43ol command. This is not a NewtonScript object, but   ° d ONLN dhå ⁄ò¶ (ï ⁄-simply a series of raw bytes. The command str b† ° d ONLN dïåßòæ )Õuctur  ËÄ ° d ONLN döåæò¸ )e is described   ° d ONLN d©ô ⁄• ı (¢ ⁄below õ  ° d ONLN dÆô Ù• ˆ ).    ° d ONLN d∞´ ~∑ î (¥ ~count    ° d ONLN d∂´ ⁄∑[ )\The number of times to send    ¶Ä ° d ONLN d“´[∑Ç )Åcommand     ∂Ä ° d ONLN dŸ´Ç∑á )'.  à‡ ° d ONLN d€´á∑ç )Y  I` ° d ONLN d‹´ç∑˛ )ou must specify at least 1.  ° d ONLN d¯Ω ~… ø (∆ ~This function r j¿ ° d ONLN dΩ ø… › )Aeturns     ˛‡ ° d ONLN dΩ ›» Ó )nil    ˝¿ ° d ONLN dΩ Ô… ), after the    -† ° d ONLN dΩ…C )-command     =† ° d ONLN d$ΩC…É )' has been sent     R† ° d ONLN d3ΩÉ…ô )@count     F‡ ° d ONLN d8Ωö…∑ ) times.  ° d ONLN d@œ ~€ ô (ÿ ~Each r  "` ° d ONLN dFœ ö€ Œ )emote contr  ° d ONLN dQœ Œ€k )4"ol command has the following C str i  ° d ONLN dsœl€É )ûuctur  Ó‡ ° d ONLN dxœÉ€ä )e:   ° d ONLN d{Ê ~Ò Ô (Ô ~struct IRCodeWord { ° d ONLN dêÙ êˇ +unsigned long name; ° d ONLN d• ê *unsigned long timeBase;  ° d ONLN dæ ê *unsigned long leadIn;  ° d ONLN d’ ê) *unsigned long repeat;  ° d ONLN dÏ, ê7 *unsigned long leadOut; ° d ONLN d: êE *unsigned long count; ° d ONLN dH êS7 *unsigned long transitions[]; ° d ONLN d7V ~a â (_ ~};  ˇ‚    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  Z \( 4⁄ ú˙( ,  	Helvetica    	 .     (‡ úExtr  Y )as Dr  ¨  )a  z? )w  ‹è )er ,  Palatino       
 (‡#3 4 ^ Z¿(    ° d ONLN d   \ ú h ≠ ( e úHer `  ° d ONLN d  \ ≠ h! )e’s a description of these ﬁ I` ° d ONLN d   \" h6 )uelds:  , 
 Courier   ° d ONLN d & l ú w ≥ ( u úname    ° d ONLN d + l ¯ x )\Identiﬁ  Ã¿ ° d ONLN d 3 l x| ) es the command code.   I  ° d ONLN d H l} xÉ )eY  	† ° d ONLN d I lÉ x( )&ou can set this value to anything you  ° d ONLN d o x ¯ Ñ
 ( Å ¯like.   ° d ONLN d u á ú í À ( ê útimeBase    ° d ONLN d ~ á ¯ ìV )\The time base in micr  =¿ ° d ONLN d ì áW ì¯ )_&oseconds. This sets the bit time base.   ° d ONLN d ∫ ñ ú ° ø ( ü úleadIn    ° d ONLN d ¡ ñ ¯ ¢- )\Duration in    b` ° d ONLN d Õ ñ. °] )6timeBase   _` ° d ONLN d ’ ñ^ ¢… )0 units of the lead bit cell.   ° d ONLN d Ú • ú ∞ ø ( Æ úrepeat    ° d ONLN d ˘ • ¯ ±- )\Duration in    b` ° d ONLN d •. ∞] )6timeBase   _` ° d ONLN d •^ ±! )0/ units of the last bit cell for loop commands.   ° d ONLN d< ± ¯ Ω ( ∫ ¯This ﬁ  $@ ° d ONLN dC ± Ω )8eld is used only when the command is sent multiple times   ° d ONLN d| ¿ ú À ≈ ( … úleadOut   ° d ONLN dÑ ¿ ¯ Ã- )\Duration in    b` ° d ONLN dê ¿. À] )6timeBase   _` ° d ONLN dò ¿^ Ã  )0) units of the last bit cell for non-loop   ° d ONLN d¡ Ã ¯ ÿ+ ( ’ ¯	commands.   ° d ONLN dÀ € ú Ê π ( ‰ úcount   ° d ONLN d— € ¯ ÁØ )\)One-based count of transitions following.    ° d ONLN d˚ Í ú ı › ( Û útransitions   ° d ONLN d Í ¯ ˆÖ )\!Array of transition durations in      @ ° d ONLN d( ÍÜ ıµ )étimeBase   @ ° d ONLN d0 Í∂ ˆ )0 units. This data is   ° d ONLN dE ˆ ¯ ( ˇ ¯speciﬁ  Ó  ° d ONLN dL ˆÎ )1c to the particular equipment you intend to contr  †@ ° d ONLN d} ˆÏ˘ )ÿol.  –Ä ° d ONLN dÅ ˆ˘ˇ )Y  ë  ° d ONLN dÇ ˆˇ )ou   ° d ONLN dÖ ¯± ( ¯'should contact the equipment manufactur Ä ° d ONLN d¨≤ı )∫er for this data.  ° d ONLN dæ úC ( ú%Refer to the IR Remote sample code fr ü¿ ° d ONLN d„C )ß,om Newton DTS for details on how to use the  ° d ONLN d  ú, ü () úr E  ° d ONLN d  †, ‘ )emote contr  ¢† ° d ONLN d  ‘,£ )4/ol functions. Included with this sample code ar  æ  ° d ONLN dJ £,÷ )œe example r  «  ° d ONLN dU ÷,Ó )3esour  @ ° d ONLN dZ Ô,  )ce ﬁ ’‡ ° d ONLN d_  , )les  ° d ONLN dc- ú9 · (6 úcontaining the r  Ä ° d ONLN ds- ‚9 )Femote contr  |  ° d ONLN d~-9" )4=ol codes for some devices, along with a ResEdit template for   ° d ONLN dª: úF § (C úcr  µ@ ° d ONLN dΩ: §F Ô )eating your own.  
M Zh( 4N Zh(  
x ZÄ( 4y ZÄ( p z Zz.z Zz.  
ˇ·ˇ‚7Ç   ˇˇ© ˇÆ ° d ONLN dœe Zx ¬ (s ZExtras Drawer   V˛ (s 0    
         ° d ONLN dﬁâ úïe (í ú,These functions operate on the Extras Drawer  ≠‡ ° d ONLN d
âeïg )….   
Ø Z¥( 4∞ Z¥( p ± ú±(± ú±(  
ˇ·ˇ‚7Ç     ° d ONLN d§ úØ ≥ (≠ úGetP  âÄ ° d ONLN d§ ≥Ø º )ar .‡ ° d ONLN d§ ΩØ — )
tCur î  ° d ONLN d§ —Ø ‡ )sor    ‡ (≠"0        ° d ONLN d∂ ú¡ Ô (ø úGetPartCursor(      z¿ ° d ONLN d*∂ ¬' )TpackageName       £` ° d ONLN d5∂'¡2 )7,      ¢† ° d ONLN d7∂3¬F )store       † ° d ONLN d<∂G¡R ),      ‡ ° d ONLN d>∂S¬| )	folderSym       -@ ° d ONLN dG∂|¡Å )))    ° d ONLN dI» ú‘( (— ú!Returns a cursor for entries corr È† ° d ONLN dj»(‘ )å3esponding to parts (icons) displayed in the Extras   ° d ONLN dù’ ú· Ω (ﬁ úDrawer  Ö¿ ° d ONLN d£’ Ω· ø )!.    ° d ONLN d•Á úÛ ” ( úpackageName    ° d ONLN d±Á ¯Ûü )\&Specify a string naming a package, or    2† ° d ONLN d◊Á†Ú± )®nil    1Ä ° d ONLN d⁄Á≤Û# ). If you specify a package   ° d ONLN dıÙ ¯ H (˝ ¯name, the cursor r  †Ä ° d ONLN dÙH ù )Peturns parts only fr ° d ONLN dÙù Ò )Uom that package. T Ø† ° d ONLN d-Ù ˚ )So r  j  ° d ONLN d0Ù¸  )eturn  ° d ONLN d6 ¯ (
 ¯parts fr  ç  ° d ONLN d>Ö ) om all packages, specify     ‡ ° d ONLN dWÜó )nnil    ¿ ° d ONLN dZòö ).    ° d ONLN d\ ú Ø ( ústore    ° d ONLN db ¯3 )\Specify a stor Å  ° d ONLN dp3b );e object or    ‡ ° d ONLN d|ct )0nil    ¿ ° d ONLN du– ). If you specify a stor  æ  ° d ONLN dñ–% )[e object, the cursor   ° d ONLN d´  ¯, ˚ () ¯r E  ° d ONLN d¨  ¸,Q )eturns parts only fr $Ä ° d ONLN d¿ Q,Ü )Uom that stor ~  ° d ONLN dÃ Ü,ï )5e. T }` ° d ONLN d– ï,† )o r  7‡ ° d ONLN d” °,€ )eturn parts fr ú  ° d ONLN d· €,
 ):om all stor  p  ° d ONLN dÏ 
, )/es,  ° d ONLN d- ¯9 (6 ¯specify     D` ° d ONLN d¯-8+ )"nil    C@ ° d ONLN d˚-,9. ).    ° d ONLN d˝? úK ≈ (H ú	folderSym    ° d ONLN d? ¯Kö )\%Specify a symbol identifying a folder  é‡ ° d ONLN d,?öK™ )¢, or     w  ° d ONLN d1?´Jº )nil    u‡ ° d ONLN d4?ΩK% ). If you specify a folder  ° d ONLN dNL ¯XP (U ¯symbol, the cursor r  ∑  ° d ONLN dbLPX£ )Xeturns parts only ﬁ  äÄ ° d ONLN dvL§X )Tled within that Extras   ° d ONLN dçY ¯e6 (b ¯Drawer folder èÄ ° d ONLN döY6eA )>. T  ≈@ ° d ONLN dùY@eK )
o r  ¿ ° d ONLN d†YLeÜ )eturn parts fr „‡ ° d ONLN dÆYÜe ):#om all folders, specify the symbol     ° d ONLN d—f ¯q (o ¯'_all   ~  ° d ONLN d÷fr! ). T  ≥‡ ° d ONLN dŸf r+ )
o r  n` ° d ONLN d‹f,rf )eturn parts fr “Ä ° d ONLN dÍffrñ ):
om the unf ˆ@ ° d ONLN dÙfñr√ )0iled folder  ¯¿ ° d ONLN dˇf√rÈ )-
, specify    Ω  ° d ONLN d	fÍq˚ )'nil    º  ° d ONLN df¸r˛ ).  ° d ONLN dx úÑ ∫ (Å úThe str ¿ ° d ONLN dx ªÑ “ )uctur  ü† ° d ONLN dx “Ñ )e of the entries r î  ° d ONLN d,xÑ$ )G>eturned by the cursor is subject to change. Entries should be  ° d ONLN djÖ úë? (é ú%accessed only by using the functions    @ ° d ONLN dèÖ@êü )§GetPartEntryData   @ ° d ONLN düÖ†ë• )`,    @ ° d ONLN d°Ö•ê˛ )LaunchPartEntry    Ï‡ ° d ONLN d∞Ö˝ë )X, and    ° d ONLN d∂í úù È (õ úSetExtrasInfo   {  ° d ONLN d√í Íû )N. Do not dir  @ ° d ONLN dœíûä )3ectly change the entries r ¡  ° d ONLN dÈíäûº )meturned by     î` ° d ONLN dÙíΩù
 )3GetPartCursor    “  ° d ONLN dí
û )M.  ˇ`    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 4⁄ <˙
 ,  Palatino       
 .     (‡ <4 ,  	Helvetica       	 )BExtr Y )as Dr  ¨  )a  z? )w  ‹è )er 4 ^ <¿
   ° d ONLN d   ] ~ g ë ( d ~Note        
 ° d ONLN d  i ~ ul *6This function exists only in the Newton 2.0 platform ﬁ T† ° d ONLN d < im uæ )Ôle and works only  ° d ONLN d N u ~ Å Ÿ ( ~ ~on Newton 2.0 units.  ,  Zapf Dingbats     ‡ ° d ONLN d c x ﬂ Ä ‰ )au   
 ö < ü
 4 õ < ü
 p  ú ~ ú
 ú ~ ú
  
ˇ·ˇ‚7Ç      
 ° d ONLN d f è ~ ö ï ( ò ~GetP  âÄ ° d ONLN d j è ï ö û )ar .‡ ° d ONLN d l è ü ö ∂ )
tEntr  öÄ ° d ONLN d q è ∂ ö — )yData    ‡ ( ò0 , 
 Courier        ° d ONLN d x ° ~ ¨ „ ( ™ ~GetPartEntryData(     y† ° d ONLN d â ° ‰ ≠ ˘ )fentry       #‡ ° d ONLN d é ° ˙ ¨ ˇ ))    ° d ONLN d ê ≥ ~ ø« ( º ~HReturns a frame containing information about an Extras Drawer part entry  È¿ ° d ONLN d ÿ ≥∆ ø» ( º∆.   ° d ONLN d ⁄ ≈ ~ — ì ( Œ ~entry    ° d ONLN d ‡ ≈ ⁄ —4 )\An entry obtained fr Ô@ ° d ONLN d Ù ≈4 —´ )Zom a part cursor (by using     v† ° d ONLN d ≈¨ –˘ )xGetPartCursor    q¿ ° d ONLN d ≈˙ —ˇ )N). ° d ONLN d ◊ ~ „ ± ( ‡ ~The frame r ‰‡ ° d ONLN d* ◊ ± „; )3 eturned has the following slots.      	 ° d ONLN dK Û ~ ˝ ∆ ( ˙ ~Slot descriptions       
 ° d ONLN d] ˇ ~
 ï *icon   ° d ONLN db ˇ ⁄ · )\A  ∫† ° d ONLN dc ˇ ·[ ) bitmap frame (of the kind r KÄ ° d ONLN d ˇ\é ){eturned by     ¿ ° d ONLN dä ˇè
‹ )3GetPictAsBits    ‡ ° d ONLN dó ˇ›‚ )N)  ° d ONLN dô ⁄Ô ( ⁄@containing the bitmap for the part icon displayed in the Extras   ° d ONLN dŸ ⁄# ˚ *Drawer Ö¿ ° d ONLN dﬂ ˚# ˝ )!.    ° d ONLN d·& ~1 ï (/ ~text    ° d ONLN dÊ& ⁄2 · )\A  ∫† ° d ONLN dÁ& ·2∏ )3 string that is the text shown under the part icon.    ° d ONLN d5 ~@ ° (> ~labels    ° d ONLN d"5 ⁄A · )\A  ∫† ° d ONLN d#5 ·A )B symbol identifying the Extras Drawer folder in which the part is  ° d ONLN deA ⁄M ‡ (J ⁄ﬁ å¿ ° d ONLN dgA ‡M* )led. If this slot is     H† ° d ONLN d|A+L< )Knil    GÄ ° d ONLN dA=MÇ ), the part is unﬁ  Ê† ° d ONLN dëAÇMí )Eled.   ° d ONLN dñP ~[ ≥ (Y ~	appSymbol   ° d ONLN d†P ⁄\ · )\A  ∫† ° d ONLN d°P ·\Í )> symbol identifying the application, if the part frame has an    ﬁ‡ ° d ONLN dﬂPÍ[˚ (YÍapp   ›¿ ° d ONLN d‚P¸\˛ )   ° d ONLN d„\ ⁄h Ï (e ⁄slot.   ° d ONLN dÈk ~v ø (t ~packageName   ° d ONLN dık ⁄w · )\A  ∫† ° d ONLN dˆk ·wı )@ string that is the name of the package which contains the part.      	 ° d ONLN d7Ö ~è ë (å ~Note        
 ° d ONLN d<ë ~ùl *6This function exists only in the Newton 2.0 platform ﬁ T† ° d ONLN dsëmùæ )Ôle and works only  ° d ONLN dÖù ~© Ÿ (¶ ~on Newton 2.0 units.      ‡ ° d ONLN dö† ﬂ® ‰ )au   
¬ <«
 4√ <«
 p ƒ ~ƒ
ƒ ~ƒ
  
ˇ·ˇ‚7Ç      
 ° d ONLN dù∑ ~¬ õ (¿ ~Launc ÿÄ ° d ONLN d¢∑ õ¬ ß )hP SÄ ° d ONLN d§∑ ®¬ ± )ar ¯‡ ° d ONLN d¶∑ ±¬ » )	tEntr  dÄ ° d ONLN d´∑ …¬ Œ )y    ‡ (¿0        ° d ONLN dÆ… ~‘ › (“ ~LaunchPartEntry(      z  ° d ONLN dæ… ﬁ’ Û )`entry       $@ ° d ONLN d√… Ù‘ ˘ ))    ° d ONLN d≈€ ~Á ◊ (‰ ~Launches the speciﬁ   ° d ONLN dŸ€ ÿÁ )ZFed part. The operation is the equivalent of the user tapping the part  ° d ONLN dË ~Ù Ó (Ò ~icon in the Extras Drawer r¿ ° d ONLN d8Ë ÓÙ  )p.    ° d ONLN d:˙ ~ ì ( ~entry    ° d ONLN d@˙ ⁄4 )\An entry obtained fr Ô@ ° d ONLN dT˙4´ )Zom a part cursor (by using     v† ° d ONLN do˙¨˘ )xGetPartCursor    q¿ ° d ONLN d|˙˙ˇ )N). ° d ONLN d ~ ø ( ~This function r j¿ ° d ONLN dé ø ˘ )Aeturns a non-    Î  ° d ONLN dõ ˘
 ):nil    È‡ ° d ONLN dû ); value if the Extras Drawer would have closed itself after   ° d ONLN dŸ ~% (" ~$the icon was tapped. This function r  '† ° d ONLN d˝%; )üeturns     ª¿ ° d ONLN d;$L )nil    ∫† ° d ONLN dM% )( if the Extras Drawer would have stayed  ° d ONLN d/& ~2 (/ ~open after the icon was tapped.      	 ° d ONLN dOA ~K ë *Note       
 ° d ONLN dTM ~Yl *6This function exists only in the Newton 2.0 platform ﬁ T† ° d ONLN dãMmYæ )Ôle and works only  ° d ONLN dùY ~e Ÿ (b ~on Newton 2.0 units.      ‡ ° d ONLN d≤\ ﬂd ‰ )au  ˇä    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  Z \( 4⁄ ú˙( ,  	Helvetica    	 .     (‡ úExtr  Y )as Dr  ¨  )a  z? )w  ‹è )er ,  Palatino       
 (‡#5 4 ^ Z¿(  
 g Z l( 4 h Z l( p  i ú i( i ú i(  
ˇ·ˇ‚7Ç   ° d ONLN d   \ ú g ÷ ( e úSetExtrasInf  £  ° d ONLN d  \ ÷ g ‹ ):o    ‡ ( e"0 , 
 Courier        ° d ONLN d  n ú y Ô ( w úSetExtrasInfo(      z¿ ° d ONLN d  n  z# )T
paramFrame      î  ° d ONLN d ' n# y. )3,      ì@ ° d ONLN d ) n/ zO )newInfo       X† ° d ONLN d 0 nP yU )!)    ° d ONLN d 2 Ä ú åá ( â ú4Changes the extras drawer information for the speciﬁ  u† ° d ONLN d g Äà å )Ïed Extras Drawer icon. The r Ù¿ ° d ONLN d É Ä å  )~eturn  ° d ONLN d â ç ú ô• ( ñ ú>value of this function is the information frame that was in ef  ¶  ° d ONLN d « ç• ôŒ ( ñ•
fect befor  ’‡ ° d ONLN d — çŒ ô ))e this call. If the  ° d ONLN d Â ö ú ¶$ ( £ ú!icon isn’t found, this function r È‡ ° d ONLN d ö$ ¶B )àeturns     ~  ° d ONLN d öC •T )nil    |‡ ° d ONLN d öU ¶W ).    ° d ONLN d ¨ ú ∏ œ ( µ ú
paramFrame     ° d ONLN d ¨ ¯ ∏ ˇ )\A  ∫† ° d ONLN d ¨ ˇ ∏# )@ frame identifying the icon whose Extras Drawer information you  ° d ONLN d^ π ¯ ≈ ( ¬ ¯8want to change. This frame can have the following slots:    ° d ONLN dó … ¯ ‘- *	appSymbol    ° d ONLN d° …6 ’S )>Requir E@ ° d ONLN dß …T ’c )ed.  Ã@ ° d ONLN d´ …c ’j )A  ‡ ° d ONLN d¨ …k ’ )) symbol identifying the application that   ° d ONLN d’ ’6 ·_ ( ﬁ6
the icon r  ¡‡ ° d ONLN dﬂ ’_ ·m ))epr  R† ° d ONLN d‚ ’n ·ã )esents.    ° d ONLN dÍ ‰ ¯ Ô ( Ì ¯store   ° d ONLN d ‰6 b )>
Optional.  Y† ° d ONLN d˙ ‰b i ),A  î@ ° d ONLN d˚ ‰i | ) stor  Œ  ° d ONLN d  ‰| Ù )e object identifying the stor  Ù‡ ° d ONLN d ‰Ù & )xe on which   ° d ONLN d( 6 ¸_ ( ˘6
the icon r  ¡‡ ° d ONLN d2 _ ¸| ))esides.    ° d ONLN d: ˇ ¯
9 ( ¯packageName   ° d ONLN dF6b +>
Optional.   Y† ° d ONLN dPbi ),A  î@ ° d ONLN dQi )( string naming the package to which the  ° d ONLN dy6#o ( 6icon belongs. ° d ONLN dà& ¯2* (/ ¯Alternately g` ° d ONLN dì&)2î )1, you can specify just an    '¿ ° d ONLN d≠&ï1  )l	appSymbol    $` ° d ONLN d∂&À2Ì )6	 for the     =¿ ° d ONLN dø&Ì2  )"
paramFrame    W  ° d ONLN d…& 2" )3   ° d ONLN d 2 ¯>% (; ¯	parameter S† ° d ONLN d”2%>‘ )-), or you can specify an entry obtained fr  ıÄ ° d ONLN d¸2‘> )Øom a part cursor   ° d ONLN d> ¯J# (G ¯
(by using     w† ° d ONLN d>$Iq ),GetPartCursor    r¿ ° d ONLN d$>rJw )N).   ° d ONLN d'O ú[ º (X únewInfo    ° d ONLN d/O ¯[ ˇ )\A  ∫† ° d ONLN d0O ˇ[£ )% new information frame for the icon r     ° d ONLN dUO£[± )§epr  Z¿ ° d ONLN dXO≤[„ )esented by     :‡ ° d ONLN dcO‰[ )2
paramFrame    T  ° d ONLN dmO[ )3.  ° d ONLN do\ ¯he (e ¯The slots in this frame ar  r  ° d ONLN dâ\eh¥ )me described below  1` ° d ONLN dö\¥h )O. If you don’t specify a   ° d ONLN d≥i ¯ui (r ¯particular slot (or specify     œÄ ° d ONLN dœiitz )qnil    Œ` ° d ONLN d“i{u" ))), the value of that slot is not changed.  ° d ONLN d¸{ úá ¢ (Ñ úY @Ä ° d ONLN d˝{ ¢á ≈ )ou can r √¿ ° d ONLN d{ ≈á} )#*ead and modify the following slots in the      ° d ONLN d/{~áû )πnewInfo      Ä ° d ONLN d6{ûáº )  frame.       	 ° d ONLN d>ó ú° ‰ (û úSlot descriptions       
 ° d ONLN dP£ úÆ ≥ *icon   ° d ONLN dU£ ¯Ø ˇ )\A  ∫† ° d ONLN dV£ ˇØy ) bitmap frame (of the kind r KÄ ° d ONLN dr£zØ¨ ){eturned by     ¿ ° d ONLN d}£≠Æ˙ )3GetPictAsBits    ‡ ° d ONLN dä£˚Ø  )N)  ° d ONLN dåØ ¯ª (∏ ¯@containing the bitmap for the part icon displayed in the Extras   ° d ONLN dÃª ¯« *Drawer Ö¿ ° d ONLN d“ª« )!.    ° d ONLN d‘  ú’ ≥ (” útext    ° d ONLN dŸ  ¯÷ ˇ )\A  ∫† ° d ONLN d⁄  ˇ÷÷ )3 string that is the text shown under the part icon.    ° d ONLN dŸ ú‰ ø (‚ úlabels    ° d ONLN dŸ ¯Â ˇ )\A  ∫† ° d ONLN dŸ ˇÂ ): symbol identifying the Extras Drawer folder in which to ﬁ Á` ° d ONLN dQŸÂ (‚le the  ° d ONLN dXÂ ¯ÒR (Ó ¯icon. Do not specify    ü‡ ° d ONLN dmÂRc )Znil    û¿ ° d ONLN dpÂdÒf ).    ° d ONLN drÙ úˇ — (˝ ú	soupNames   ° d ONLN d|Ù ¯ j )\An array of strings that ar  È` ° d ONLN dóÙj ' )r+e the names of soups to be associated with   ° d ONLN d¬  ¯Ω (	 ¯/this icon. This slot applies to soup icons only õ¿ ° d ONLN dÒ ºæ )ƒ.    ° d ONLN dÛ ú À ( úownerApp    ° d ONLN d¸ ¯ )\The    ª¿ ° d ONLN d @ )	appSymbol    ∏` ° d ONLN d	A )63 of the application that owns the soups. This slot   ° d ONLN d< ¯'j ($ ¯applies to soup icons only  N` ° d ONLN dVj'l )r.       	 ° d ONLN dX5 ú? Ø (< úNote        
 ° d ONLN d]A úMã *6This function exists in both the Newton 2.0 platform ﬁ ß  ° d ONLN dîAãM∏ )Ôle and the   ° d ONLN düM úY (V úMessagePad platform ﬁ Ä† ° d ONLN dµMYó )i!le, however it is implemented dif  ~` ° d ONLN d÷MóY£ )ífer  `‡ ° d ONLN dŸM£Y… )	ently on   ° d ONLN d‚Y úe± (b ú?each platform. This description applies only to the Newton 2.0  ° d ONLN d!e úq ≈ *	platform.  ,  Zapf Dingbats     º‡ ° d ONLN d+h  p œ ).u  ˇ*    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 4⁄ <˙
 ,  Palatino       
 .     (‡ <6 ,  	Helvetica       	 )BExtr Y )as Dr  ¨  )a  z? )w  ‹è )er 4 ^ <¿
  
 g < l
 4 h < l
 p  i ~ i
 i ~ i
  
ˇ·ˇ‚7Ç    
 ° d ONLN d   \ ~ g ã ( e ~Ad  ∫‡ ° d ONLN d  \ ã g æ )
dExtraIcon   ‡ ( e0 , 
 Courier        ° d ONLN d  n ~ y À ( w ~AddExtraIcon(     {  ° d ONLN d  n Ã z Ù )N	extraType       ‡ ° d ONLN d $ n ı y  )),        ° d ONLN d & n z4 )
paramFrame      ` ° d ONLN d 0 n4 y? )3,      † ° d ONLN d 2 n@ zw )packageName       F@ ° d ONLN d = nw yÇ )7,      EÄ ° d ONLN d ? nÉ zñ )store       ¥Ä ° d ONLN d D nñ yõ ))    ° d ONLN d F Ä ~ å ( â ~!Adds an icon to the Extras Drawer ~  ° d ONLN d g Ä å )ò.  P` ° d ONLN d i Ä å! )Y  ‡ ° d ONLN d j Ä! å· )-ou can use this function to add an icon that   ° d ONLN d ó ç ~ ô Å ( ñ ~r E  ° d ONLN d ò ç Ç ô ê )epr  ’¿ ° d ONLN d õ ç ê ô Ù )esents several soups cr  ˆ@ ° d ONLN d ≤ ç Ù ô£ )d(eated by your application, for example.  º` ° d ONLN d ⁄ ç§ ô™ )∞Y  |‡ ° d ONLN d € ç™ ô˛ )ou can also add an   ° d ONLN d Ó ö ~ ¶x ( £ ~8icon that simply executes a function object when tapped.    ° d ONLN d' ¨ ~ ∏ ¶ *	extraType     ° d ONLN d1 ¨ ⁄ ∏√ )\6Specify a symbol identifying the type of icon to add.  g¿ ° d ONLN dg ¨√ ∏… )ÈY  (@ ° d ONLN dh ¨… ∏Ë )ou can   ° d ONLN do π ⁄ ≈ ˚ ( ¬ ⁄specify     D` ° d ONLN dw π ¸ ƒ7 )"
'soupEntry   @† ° d ONLN dÅ π8 ≈ú )< to add a soup icon, or    Û` ° d ONLN dô πú ƒ„ )d'scriptEntry   Ó‡ ° d ONLN d• π‰ ≈ )H to add  ° d ONLN d≠ ∆ ⁄ “ ( œ ⁄a script icon.    ° d ONLN dº ÿ ~ ‰ ± ( · ~
paramFrame     ° d ONLN d« ÿ ⁄ ‰Ã )\7Specify a frame containing information to be used in cr  ` ° d ONLN d˛ ÿÕ ‰˚ )Ûeating the   ° d ONLN d	 Â ⁄ Òà ( Ó ⁄)icon. See the descriptions of slots below m  ° d ONLN d2 Âà Òä )Æ.    ° d ONLN d4 ˜ ~ µ (  ~packageName    ° d ONLN d@ ˜ ⁄˝ )\ASpecify a string naming a package with which this icon should be   ° d ONLN dÅ ⁄\ * associated. If this package is r    ° d ONLN d°]ä )É	emoved fr  W† ° d ONLN d™ä )-om the Newton device, the  ° d ONLN dƒ ⁄Y ( ⁄icon you added will also be r 	` ° d ONLN d·Z◊ )Äemoved. For an icon of type    ° d ONLN d˝ ⁄) (' ⁄
'soupEntry    `Ä ° d ONLN d*∆ );', you should specify a package name dif  3` ° d ONLN d.∆*“ )±fer  ‡ ° d ONLN d1“*È )ent fr å  ° d ONLN d7È*˘ )om   ° d ONLN d:+ ⁄7G (4 ⁄your application. This pr ‡ ° d ONLN dS+H7≥ )nevents your soup icon fr † ° d ONLN dk+≥7‚ )k
om being r π@ ° d ONLN du+‚7 )/emoved   ° d ONLN d|8 ⁄DS (A ⁄if the application is on a car  Ú  ° d ONLN dö8SDå )yd and the car  çÄ ° d ONLN dß8çD£ ):d is r ì† ° d ONLN d≠8£D… )emoved.    ° d ONLN dµJ ~V ë (S ~store    ° d ONLN dªJ ⁄V )\Specify a stor Å  ° d ONLN d…JV» );)e object on which the part entry should r  {¿ ° d ONLN dÚJ»V· )≥eside. ° d ONLN d˘\ ~h ø (e ~This function r j¿ ° d ONLN d\ øh√ )A;eturns a frame that is the entry added to the Extras Drawer  	@ ° d ONLN dC\√h≈ (e√. ° d ONLN dEn ~z@ (w ~-This function does not check if your icon alr Y  ° d ONLN drn@zä )¬eady exists befor  D  ° d ONLN dÉnäzæ )Je adding it.   ã@ ° d ONLN dênæzƒ )4Y  K¿ ° d ONLN dënƒz )ou must check  ° d ONLN dü{ ~á § (Ñ ~	to be sur í@ ° d ONLN d®{ §á ‚ )&e it doesn’t alr &‡ ° d ONLN d∏{ „á )?eady exist.  ° d ONLN dƒç ~ô è (ñ ~Her `  ° d ONLN d«ç èô' )&e’s a description of the slots in the    g` ° d ONLN dÌç'ôZ )ò
paramFrame    Ä† ° d ONLN d˜çZôå )3 parameter:       	 ° d ONLN d© ~≥ ∆ (∞ ~Slot descriptions       
 ° d ONLN dµ ~¿ ï *text   ° d ONLN dµ ⁄¡ ˜ )\Requir E@ ° d ONLN d µ ¯¡ )ed.  Ã@ ° d ONLN d$µ¡ )A  ‡ ° d ONLN d%µ¡— ). string that is the text shown under the icon.   ° d ONLN dTƒ ~œ ï (Õ ~icon    ° d ONLN dYƒ ⁄–! )\Recommended.   √  ° d ONLN dfƒ!–( )GA  ˝¿ ° d ONLN dgƒ(–¢ ) bitmap frame (of the kind r é† ° d ONLN dÉƒ£–’ ){eturned by     ° d ONLN dé– ⁄€' (Ÿ ⁄GetPictAsBits   {  ° d ONLN dõ–(‹ˇ )N2) containing the bitmap for the icon displayed in  ° d ONLN dÕ‹ ⁄Ë* (Â ⁄the Extras Drawer Ä ° d ONLN dﬁ‹*Ë, )P.    ° d ONLN d‡Î ~ˆ è (Ù ~app   ° d ONLN d‰Î ⁄˜! )\Recommended.   √  ° d ONLN dÒÎ!˜( )GA  ˝¿ ° d ONLN dÚÎ(˜r ) symbol used by    √† ° d ONLN dÎsˆ¿ )KSetExtrasInfo    æ¿ ° d ONLN dÎ¡˜‘ )N to ﬁ  É` ° d ONLN dÎ’˜ )nd the icon.   ° d ONLN d"˙ ~ ° ( ~labels    ° d ONLN d)˙ ⁄ )\
Optional.  Y† ° d ONLN d3˙ ),A  î@ ° d ONLN d4˙˛ )6 symbol identifying the Extras Drawer folder in which  ° d ONLN dj ⁄ Î ( ⁄to ﬁ  ƒ† ° d ONLN do Î_ )le the icon. Do not specify    s‡ ° d ONLN dã`q )unil    r¿ ° d ONLN dért ).    ° d ONLN dê ~  ≠ ( ~ownerApp    ° d ONLN dô ⁄! )\Optional. The    Û¿ ° d ONLN dß N )?	appSymbol    ` ° d ONLN d∞O!˛ )6) of the application that owns the soups.   ° d ONLN dŸ! ⁄-í (* ⁄.This slot is used only if the icon is of type     G  ° d ONLN d!ì,Œ )π
'soupEntry   '† ° d ONLN d!Œ-– );.    ° d ONLN d0 ~; ≥ (9 ~	soupNames   ° d ONLN d0 ⁄< )\
Optional.  Y† ° d ONLN d'0<x ),An array of strings that ar  √  ° d ONLN dB0x<Ó )re the names of soups to be   ° d ONLN d]< ⁄H (E ⁄Iassociated with this icon. This slot is used only if the icon is of type    ° d ONLN d¶H ⁄S *
'soupEntry   `Ä ° d ONLN d∞HT );.    ° d ONLN d≤W ~b ≥ (` ~	tapAction   ° d ONLN dºW ⁄c )\
Optional.  Y† ° d ONLN d∆Wc ),A  î@ ° d ONLN d«WcÈ )8 function object that is called if this icon is of type    ° d ONLN dˇc ⁄n! (l ⁄'scriptEntry    {Ä ° d ONLN dc"oÛ )H2 and the user taps it. This function is passed no  ° d ONLN d=o ⁄{h (x ⁄!parameters. This function is stor ”  ° d ONLN d^oh{¢ )éed in a soup.  Ä@ ° d ONLN dlo£{© );Y  @¿ ° d ONLN dmo©{ )ou should keep it as   ° d ONLN dÇ{ ⁄á& (Ñ ⁄small as possible.       	 ° d ONLN dïï ~ü ë (ú ~Note        
 ° d ONLN dö° ~≠l *6This function exists only in the Newton 2.0 platform ﬁ T† ° d ONLN d—°m≠æ )Ôle and works only  ° d ONLN d„≠ ~π Ÿ (∂ ~on Newton 2.0 units.  ,  Zapf Dingbats     ‡ ° d ONLN d¯∞ ﬂ∏ ‰ )au  ˇ§    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  Z \( 4⁄ ú˙( ,  	Helvetica    	 .     (‡ úMiscellaneous ,  Palatino       
 (‡#7 4 ^ Z¿(  
 ^ Z x( 4 ^ Z x(  
 à Z ê( 4 â Z ê( p  ä Z ä. ä Z ä.  
ˇ·ˇ‚7Ç      ˇˇ© ˇÆ ° d ONLN d   u Z à ¿ ( É ZMiscellaneous   V˛ ( É 0    
         ° d ONLN d  ô ú •D ( ¢ ú'This section describes other functions.  
 ø Z ƒ( 4 ¿ Z ƒ( p  ¡ ú ¡( ¡ ú ¡(  
ˇ·ˇ‚7Ç     ° d ONLN d 8 ¥ ú ø ¨ *Car  ¯@ ° d ONLN d ; ¥ ¨ ø “ )dFileSaf ¬‡ ° d ONLN d C ¥ ” ø Ù )'eRemo  Ê  ° d ONLN d H ¥ Ù ø
 )!veLa |Ä ° d ONLN d L ¥ ø )y  À‡ ° d ONLN d M ¥ ø )out    ‡ ( Ω"0 , 
 Courier        ° d ONLN d R ∆ ú —1 ( œ úCardFileSafeRemoveLayout(     v† ° d ONLN d k ∆2 “K )ñlayout      ` ° d ONLN d q ∆L —Q ))    ° d ONLN d s ÿ ú ‰ Ω ( · úSafely r  ô¿ ° d ONLN d { ÿ Ω ‰ ˆ )!emoves a car è  ° d ONLN d á ÿ ˆ ‰ )9dﬁ ∑Ä ° d ONLN d ä ÿ ‰2 )le layout fr ∏‡ ° d ONLN d ñ ÿ2 ‰æ )0om the Names application. (Car p  ° d ONLN d ¥ ÿø ‰À )çdﬁ òÄ ° d ONLN d ∑ ÿÀ ‰' )le layouts appear on   ° d ONLN d Ã Â ú ÒZ ( Ó ú)the Show menu in the Names application.)  N‡ ° d ONLN d ı Â[ Òa )øY  ` ° d ONLN d ˆ Âa Ò )+ou should use this function instead of the   ° d ONLN d! Ú ú ˛ © ( ˚ úcar µ@ ° d ONLN d$ Ú © ˛ µ )dﬁ ›¿ ° d ONLN d' Ú µ ˛ „ )
le method    “` ° d ONLN d1 Ú ‰ ˝+ )/RemoveLayout   Õ‡ ° d ONLN d= Ú, ˛= )H to r  J¿ ° d ONLN dB Ú> ˛r )emove a car    ° d ONLN dM Ús ˛ )5dﬁ +Ä ° d ONLN dP Ú ˛! )&le layout. Using this function avoids  ° d ONLN dv ˇ ú Â ( ú“Reinsert the car ˇ† ° d ONLN dá ˇ Â )Id” warnings.   ° d ONLN dî ú µ ( úlayout     ° d ONLN dõ ¯ ˇ )\A  ∫† ° d ONLN dú ˇu ) symbol identifying the car  H† ° d ONLN d∑vÇ )wdﬁ q  ° d ONLN d∫ÇÊ )le layout you want to r  Õ  ° d ONLN d—Ê )demove. This  ° d ONLN d› ¯*´ (' ¯(is the same symbol you passed to the car  ¿ ° d ONLN d¨*∏ )¥dﬁ C@ ° d ONLN d∏*Ê )
le method    7‡ ° d ONLN dÁ) )/	AddLayout    4Ä ° d ONLN d* )6   ° d ONLN d+ ¯7F (4 ¯to add the layout.  ° d ONLN d/= úI ≥ (F úThe r Ä¿ ° d ONLN d4= ≥IT )%eturn value of this function is undeﬁ  ∏  ° d ONLN dZ=TIå )°ned; do not r  N@ ° d ONLN dg=çI≥ )9
ely on it.      	 ° d ONLN drX úb Ø (_ úNote        
 ° d ONLN dwd úpä *6This function exists only in the Newton 2.0 platform ﬁ T† ° d ONLN dÆdãp‹ )Ôle and works only  ° d ONLN d¿p ú| ˜ (y úon Newton 2.0 units.  ,  Zapf Dingbats     ‡ ° d ONLN d’s ˝{ )au   
ï Zö( 4ñ Zö( p ó úó(ó úó(  
ˇ·ˇ‚7Ç      
 ° d ONLN dÿä úï (ì úGetCalendarMeetingT 9Ä ° d ONLN dÎäï )gypes   ‡ (ì"0        ° d ONLN dÒú úß1 (• úGetCalendarMeetingTypes()   ° d ONLN dÆ ú∫¡ *DReturns an array of symbols that identify all of the meeting types r    ° d ONLN dOÆ¬∫ﬂ (∑¬egister o@ ° d ONLN dVÆﬂ∫ )ed with the  ° d ONLN dbª ú« (ƒ úUDates application (calendar). The array includes both built-in meeting types and any  ° d ONLN d∑» ú‘ œ *new types r  @ ° d ONLN d¬» –‘ Ì )4egister  `` ° d ONLN d…» Ì‘ )ed thr ûÄ ° d ONLN dœ»‘M )ough the use of    0  ° d ONLN dﬂ»N”° )GRegMeetingType   *‡ ° d ONLN dÌ»¢‘§ )T.       	 ° d ONLN dÔ„ úÌ Ø (Í úNote        
 ° d ONLN dÙÔ ú˚ä *6This function exists only in the Newton 2.0 platform ﬁ T† ° d ONLN d+Ôã˚‹ )Ôle and works only  ° d ONLN d=˚ ú ˜ ( úon Newton 2.0 units.      ‡ ° d ONLN dR˛ ˝ )au   
  Z%( 4! Z%( p " ú"(" ú"(  
ˇ·ˇ‚7Ç      
 ° d ONLN dU ú  ( úGetCalendarMeetingT 9Ä ° d ONLN dh   )gypeInf w¿ ° d ONLN dn  & )o    ‡ ("0        ° d ONLN dq' ú2= (0 úGetCalendarMeetingTypeInfo(     u‡ ° d ONLN då'>3m )¢
typeSymbol      ‹@ ° d ONLN dñ'm2r )/)    ° d ONLN dò9 úEÌ (B úMReturns a frame of information about a particular meeting type. If the speciﬁ q  ° d ONLN dÊ9ÓE (BÓed type is  ° d ONLN dÒF úR ‚ (O únot found, then     u† ° d ONLN dF „Q Ù )Gnil    tÄ ° d ONLN dF ıR ) is r  ^‡ ° d ONLN d	FR* )eturned.   ° d ONLN dX úd À (a ú
typeSymbol     ° d ONLN dX ¯d ˇ )\A  ∫† ° d ONLN dX ˇdü )$ symbol identifying a meeting type r ä¿ ° d ONLN dBX†dΩ )°egister  Ÿ‡ ° d ONLN dIXΩd )ed with the Dates  ° d ONLN d[e ¯q™ (n ¯)application. Specify one of the symbols r <‡ ° d ONLN dÑe´q› )≥eturned by     ° d ONLN dèr ¯}Å ({ ¯GetCalendarMeetingTypes   w` ° d ONLN d¶rÇ~Ñ )ä.  ° d ONLN d®Ñ úê ≥ (ç úThe r Ä¿ ° d ONLN d≠Ñ ≥êp )+eturned frame contains the following slots.  ˇˆ    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 4⁄ <˙
 ,  Palatino       
 .     (‡ <8 ,  	Helvetica       	 )BMiscellaneous  4 ^ <¿
   ° d ONLN d   ] ~ g ∆ ( d ~Slot descriptions , 
 Courier       
 ° d ONLN d  i ~ t õ *label    ° d ONLN d  i ⁄ u · )\A  ∫† ° d ONLN d  i · u )D string that is the text displayed in the New menu for this meeting  ° d ONLN d ] u ⁄ Å  ( ~ ⁄type.   ° d ONLN d c Ñ ~ è ï ( ç ~icon    ° d ONLN d h Ñ ⁄ ê · )\A  ∫† ° d ONLN d i Ñ · ê[ ) bitmap frame (of the kind r KÄ ° d ONLN d Ö Ñ\ êé ){eturned by     ¿ ° d ONLN d ê Ñè è‹ )3GetPictAsBits    ‡ ° d ONLN d ù Ñ› ê‚ )N)  ° d ONLN d ü ê ⁄ ú˙ ( ô ⁄Acontaining the bitmap that is displayed in the New menu for this  ° d ONLN d ‡ ú ⁄ ® *meeting type.    ° d ONLN d Ó ´ ~ ∂ ≥ ( ¥ ~	smallIcon   ° d ONLN d ¯ ´ ⁄ ∑ · )\A  ∫† ° d ONLN d ˘ ´ · ∑Ì )= bitmap frame containing the bitmap that is displayed in the   ° d ONLN d6 ∑ ⁄ √q ( ¿ ⁄#meeting slip for this meeting type.   ° d ONLN dZ ∆ ~ — õ ( œ ~shape   ° d ONLN d` ∆ ⁄ “ · )\A  ∫† ° d ONLN da ∆ · “^ ) shape object containing the     æ` ° d ONLN d~ ∆^ —u )}icon   º‡ ° d ONLN dÇ ∆v “ö ) bitmap.   ° d ONLN dã ’ ~ ‡ ° ( ﬁ ~memory    ° d ONLN dí ’ ⁄ · · )\A  ∫† ° d ONLN dì ’ · ·n ) symbol under which the most r Æ` ° d ONLN d± ’n · )ç#ecently used meeting title strings   ° d ONLN d‘ · ⁄ Ì ‚ ( Í ⁄ar  E  ° d ONLN d÷ · „ Ì ˚ )	e stor HÄ ° d ONLN d‹ · ˚ Ì3 )ed. (These ar  â  ° d ONLN dÈ ·3 ÌK )8e stor å† ° d ONLN dÔ ·K ÌÎ )$ed and accessed using the functions    ° d ONLN d Ì ⁄ ¯' ( ˆ ⁄AddMemoryItem   {  ° d ONLN d  Ì( ˘= )N and     h@ ° d ONLN d% Ì> ¯ë )GetMemoryItems   c  ° d ONLN d3 Ìí ˘ó )T.)      	 ° d ONLN d6 ~ ë ( ~Note        
 ° d ONLN d; ~l *6This function exists only in the Newton 2.0 platform ﬁ T† ° d ONLN drmæ )Ôle and works only  ° d ONLN dÑ ~+ Ÿ (( ~on Newton 2.0 units.  ,  Zapf Dingbats     ‡ ° d ONLN dô" ﬂ* ‰ )au   
D <I
 4E <I
 p F ~F
F ~F
  
ˇ·ˇ‚7Ç      
 ° d ONLN dú9 ~D   (B ~GetPrinterName    ‡ (B0        ° d ONLN d¨K ~V ◊ (T ~GetPrinterName(     z` ° d ONLN dªK ÿW )ZprinterFrame      ]` ° d ONLN d«KV )6)    ° d ONLN d…] ~i (f ~!Retrieves the name of the printer Ó` ° d ONLN dÍ]iè )ê, given a printer frame object.    ° d ONLN d
o ~{ ≥ (x ~printerFrame     ° d ONLN do ⁄{ · )\A  ∫† ° d ONLN do ·{Í )= printer frame object. The only valid method for obtaining a   ° d ONLN dU| ⁄àL (Ö ⁄printer frame object is to r  † ° d ONLN dq|Mà} )setrieve it fr  g¿ ° d ONLN d~|}àø )0om the system    ° d ONLN dåâ ⁄î? (í ⁄userConfiguration   y† ° d ONLN dùâ@ïÜ )f frame with the    é@ ° d ONLN d≠âÜî” )FGetUserConfig    â` ° d ONLN d∫â‘ï  )N function.   ° d ONLN d≈ñ ⁄¢0 (ü ⁄Do not try to constr  Õ  ° d ONLN dŸñ0¢Ì )V-uct the slots of this frame yourself because   ° d ONLN d£ ⁄Ø Ê (¨ ⁄dif ™` ° d ONLN d	£ ÊØ Ú )fer  å‡ ° d ONLN d£ ÚØo )ent types of printer drivers r ñ@ ° d ONLN d*£oØÜ )}equir  ≠Ä ° d ONLN d/£ÜØô )e dif  !Ä ° d ONLN d4£öØ¶ )fer    ° d ONLN d7£¶ØÃ )
ent slots. ° d ONLN dBµ ~¡ ø (æ ~This function r j¿ ° d ONLN dQµ ø¡ )Aeturns a string r  ~¿ ° d ONLN dbµ¡ )Fepr  Ä ° d ONLN deµ¡Í )1esenting the name of the printer associated with     ° d ONLN dñ¬ ~Œ ≥ (À ~printerFrame     c  ° d ONLN d¢¬ ¥Œ ∂ )6.  ° d ONLN d§‘ ~‡ è (› ~Her `  ° d ONLN dß‘ è‡) )#e is an example of some code that r  öÄ ° d ONLN d ‘)‡ß )öetrieves the name of the curr  ö  ° d ONLN dÁ‘ß‡ÿ )~ent printer:   ° d ONLN dÙÎ ~ˆó (Ù ~/printerFrame := GetUserConfig('currentPrinter); ° d ONLN d$˘ ~˜ *?thePrinterName := call kGetPrinterNameFunc with (printerFrame);   
  <%
 4! <%
 p " ~"
" ~"
  
ˇ·ˇ‚7Ç     ° d ONLN de ~  æ *MissingImpor ∞¿ ° d ONLN dq ø  « )Ats   ‡ (0        ° d ONLN du' ~2 ◊ (0 ~MissingImports(     z` ° d ONLN dÑ' ÿ3 Û )ZpkgRef      A  ° d ONLN dä' Ù2 ˘ ))    ° d ONLN då9 ~E∞ (B ~EReturns an array of frames describing units used by a package that ar ¶` ° d ONLN d—9∞E⁄ (B∞
e not curr  (@ ° d ONLN d€9€EÛ )+ently  ° d ONLN d·F ~R „ (O ~available. If no units ar Ø  ° d ONLN d˙F „R )ee missing,     x  ° d ONLN dFQ# )/nil    v‡ ° d ONLN dF$R4 ) is r  a@ ° d ONLN dF4RY )eturned.   ° d ONLN dX ~d ô (a ~pkgRef     ° d ONLN dX ⁄d · )\A  ∫† ° d ONLN dX ·d )
 package r Ÿ‡ ° d ONLN d(Xd )-efer Ü  ° d ONLN d,Xd )5ence identifying the package for which this function   ° d ONLN dae ⁄q › (n ⁄r E  ° d ONLN dbe ﬁq6 )eturns information.  f‡ ° d ONLN dve6q< )XY  '` ° d ONLN dwe<q¨ )ou can obtain a package r  ~  ° d ONLN dêe¨qº )pefer *@ ° d ONLN dîeΩq˚ )ence by using  ° d ONLN d¢r ⁄~ ({ ⁄the functions     ®† ° d ONLN d∞r}] )<ObjectPkgRef   §  ° d ONLN dºr^~l )H or    @ ° d ONLN d¿rm}¢ )	GetPkgRef    ‡ ° d ONLN d…r£~• )6.  ° d ONLN dÀÑ ~ê ’ (ç ~In the array that is r  ¬  ° d ONLN d·Ñ ’êï )W,eturned, each frame has the following slots. ˇ$    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  Z \( 4⁄ ú˙( ,  	Helvetica    	 .     (‡ úMiscellaneous ,  Palatino       
 (‡#9 4 ^ Z¿(    	 ° d ONLN d   ] ú g ‰ ( d úSlot descriptions , 
 Courier       
 ° d ONLN d  i ú t ≥ *name   ° d ONLN d  i ¯ u ˇ )\A  ∫† ° d ONLN d  i ˇ u| ) symbol identifying the unit.    ° d ONLN d 6 x ú É π ( Å úmajor   ° d ONLN d < x ¯ ÑÇ )\The unit major version number  ”† ° d ONLN d Y xÅ ÑÉ )â.    ° d ONLN d [ á ú í π ( ê úminor   ° d ONLN d a á ¯ ìÉ )\The unit minor version number  6† ° d ONLN d ~ áÉ ìÖ )ã.  ° d ONLN d Ä ò ú § ( ° úTRefer to the Newton DTS sample code for details on how to use this function and the   ° d ONLN d ‘ • ú ±9 *!unit import and export mechanism.       	 ° d ONLN d ˆ ¿ ú   Ø *Note       
 ° d ONLN d ˚ Ã ú ÿä *6This function exists only in the Newton 2.0 platform ﬁ T† ° d ONLN d2 Ãã ÿ‹ )Ôle and works only  ° d ONLN dD ÿ ú ‰ ˜ ( · úon Newton 2.0 units.  ,  Zapf Dingbats     ‡ ° d ONLN dY € ˝ „ )au   
 ˝ Z( 4 ˛ Z( p  ˇ ú ˇ( ˇ ú ˇ(  
ˇ·ˇ‚7Ç      
 ° d ONLN d\ Ú ú ˝ ’ ( ˚ ú
RegGlobalK  ë` ° d ONLN df Ú ’ ˝ ⁄ )9e  ˙` ° d ONLN dg Ú ⁄ ˝ ı )yboar    ° d ONLN dl Ú ˆ ˝ ¸ )d    ‡ ( ˚"0        ° d ONLN do ú ( úRegGlobalKeyboard(      y@ ° d ONLN dÅ4 )l	kbdSymbol       π` ° d ONLN dä4? ),,      ∏† ° d ONLN då@s )kbdTemplate       ˇÄ ° d ONLN dósx )3)    ° d ONLN dô ú"9 ( ú!Replaces the alphanumeric keyboar ›† ° d ONLN d∫9"„ )ù%d in the system with a custom keyboar  7  ° d ONLN dﬂ‰"Ô )´d.   Ù` ° d ONLN d‚Ó" )
Anytime  ° d ONLN dÍ# ú/ (, úthe alphanumeric keyboar  Ñ† ° d ONLN d#/‰ )t,d would have been opened, the custom keyboar e@ ° d ONLN d.#‰/ )‘
d will be  ° d ONLN d80 ú< ‚ (9 úopened instead.   ° d ONLN dHB úN » *	kbdSymbol     ° d ONLN dRB ¯N ˇ )\A  ∫† ° d ONLN dSB ˇN≠ )& unique symbol identifying the keyboar h  ° d ONLN dyBÆNÃ )Ød view »  ° d ONLN dBÀN– ).  öÄ ° d ONLN dÅB–N÷ )Y  [  ° d ONLN dÇB÷N )
ou should  ° d ONLN dåO ¯[á (X ¯append your developer signatur  ø@ ° d ONLN d™Oá[≤ )è
e to ensur ‰‡ ° d ONLN d¥O≤[ )+e that this symbol is  ° d ONLN d \ ¯h (e ¯unique.   ° d ONLN d“n úz œ (w úkbdTemplate    ° d ONLN dﬁn ¯z ˇ )\A  ∫† ° d ONLN dﬂn ˇz™ )& view template that is the new keyboar µ@ ° d ONLN dn™zœ )´d you ar °¿ ° d ONLN dnœz⁄ )%e r  ∞` ° d ONLN dn⁄z  )egistering. This   ° d ONLN d!{ ¯áò (Ñ ¯#template must include a slot named    ‡ ° d ONLN dD{ôÜ
 )°preAllocatedContext    ¿ ° d ONLN dW{á )r   ° d ONLN dXà ¯îâ (ë ¯!whose value is set to the symbol    ç  ° d ONLN dyàâì‹ )ë'alphaKeyboard   á‡ ° d ONLN dáà›î  )T. This template  ° d ONLN dóï ¯°É (û ¯must also include a slot named    ‹@ ° d ONLN d∂ïÉ†≤ )ãuserName   Ÿ@ ° d ONLN dæï≥° )0 whose value is a string   ° d ONLN d◊¢ ¯ÆP (´ ¯naming the keyboar  ı† ° d ONLN dÈ¢PÆÆ )Xd. This is the keyboar U† ° d ONLN dˇ¢ØÆ  )_d name that the user sees  ° d ONLN dØ ¯ª' (∏ ¯
in keyboar  c¿ ° d ONLN d#Ø'ªQ )/
d pickers. ° d ONLN d.¡ úÕ › (  úThis function r j¿ ° d ONLN d=¡ ›Õ/ )Aeturns the keyboar @ ° d ONLN dO¡0ÕN )Sd view f@ ° d ONLN dU¡MÕ! )4, if it was successfully instantiated and installed  ° d ONLN dâŒ ú⁄ (◊ úin the system; otherwise, it r  ˚Ä ° d ONLN dßŒ⁄6 )|eturns     è† ° d ONLN dÆŒ7ŸH )nil    éÄ ° d ONLN d±ŒI⁄Ö ). The keyboar  t@ ° d ONLN dæŒÖ⁄Œ )<d view will be cr  ’‡ ° d ONLN dœŒŒ⁄ )Ieated as a child of  ° d ONLN d„€ úÁ ∞ (‰ úthe r ¢` ° d ONLN dË€ ∞Á ÷ )oot view   ° d ONLN d€ ÷Á ÿ )&.  ° d ONLN dÚÌ ú˘ (ˆ úIn your custom keyboar  Ä ° d ONLN dÌ˘ )j>d, you might want to include a button that opens the Personal  ° d ONLN dF˙ ú ¶ ( úW ï  ° d ONLN dG˙ • Æ )	or œÄ ° d ONLN dI˙ Æ )	d List. That’s the user  ¬† ° d ONLN d`˙ç )`’s dictionary of personal wor  ¥  ° d ONLN d}˙ç– )ds. The standar  z  ° d ONLN då˙— )Dd alphanumeric   ° d ONLN dõ ú ø ( úkeyboar *  ° d ONLN d¢ ¿ã )$-d includes a button that opens the Personal W  ¶@ ° d ONLN dœäì ) or ‡¿ ° d ONLN d—ì∑ )		d List. T  5¿ ° d ONLN d⁄∑ )$o do this, include your  ° d ONLN dÚ ú  ( úown button in your keyboar  ⁄` ° d ONLN d ≤ )|#d template (don’t use the bitmap fr  @ ° d ONLN d/≥ ! )õom the ROM), and if the  ° d ONLN dG! ú-2 (* ú%user taps it, execute code like this:   ° d ONLN dm8 úCC *If GetRoot().reviewdict then ° d ONLN dãF ÆQ À +begin ° d ONLN díT Æ_U *GetRoot().reviewdict:Open(); ° d ONLN d∞b Æm ˚ *base:Close();  ° d ONLN døp Æ{ ≈ *end;      	 ° d ONLN dƒå úñ Ø (ì úNote        
 ° d ONLN d…ò ú§ä *6This function exists only in the Newton 2.0 platform ﬁ T† ° d ONLN d òã§‹ )Ôle and works only  ° d ONLN d§ ú∞ ˜ (≠ úon Newton 2.0 units.      ‡ ° d ONLN d'ß ˝Ø )au  ˇö    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 4⁄ <˙
 ,  Palatino       
 .     (‡ <10  ,  	Helvetica       	 )BMiscellaneous  4 ^ <¿
  
 g < l
 4 h < l
 p  i ~ i
 i ~ i
  
ˇ·ˇ‚7Ç    
 ° d ONLN d   \ ~ g ƒ ( e ~UnRegGlobalK  Â@ ° d ONLN d  \ ƒ g … )Fe  N@ ° d ONLN d  \   g Â )yboar  U  ° d ONLN d  \ Â g Î )d    ‡ ( e0 , 
 Courier        ° d ONLN d  n ~ y ı ( w ~UnRegGlobalKeyboard(      xÄ ° d ONLN d ) n ˆ z" )x	kbdSymbol       ∏† ° d ONLN d 2 n" y' ),)    ° d ONLN d 4 Ä ~ å è ( â ~Unr ›† ° d ONLN d 7 Ä è å )egisters a custom keyboar  † ° d ONLN d P Ä å5 )sd that you r ƒ@ ° d ONLN d \ Ä5 åR )3egister  ` ° d ONLN d c ÄS åw )ed with    K‡ ° d ONLN d k Äw ã‹ )$RegGlobalKeyboard    EÄ ° d ONLN d | Ä› åﬂ )f.    ° d ONLN d ~ í ~ û ™ ( õ ~	kbdSymbol    ° d ONLN d à í ⁄ û · )\A  ∫† ° d ONLN d â í · ûn ) symbol identifying the keyboar  Ω` ° d ONLN d ® ín ûë )çd to unr .Ä ° d ONLN d ∞ íí ûØ )$egister  Ì‡ ° d ONLN d ∑ íÆ û∞ ).  ° d ONLN d π § ~ ∞ ø ( ≠ ~This function r j¿ ° d ONLN d » § ø ∞ › )Aeturns     ˛‡ ° d ONLN d œ § › Ø Ó )nil    ˝¿ ° d ONLN d “ § Ô ∞ Ò ).  ° d ONLN d ‘ ∂ ~ ¬ ø ( ø ~This function r j¿ ° d ONLN d „ ∂ ø ¬ ‘ )Aestor  Ó@ ° d ONLN d Ë ∂ ‘ ¬8 )es the original keyboar  ~  ° d ONLN d ˇ ∂9 ¬l )ed that you r @† ° d ONLN d ∂m ¬ )4%eplaced in the system. It closes the   ° d ONLN d0 √ ~ œ ƒ ( Ã ~custom keyboar  Í@ ° d ONLN d> √ ƒ œÙ )FJd, if it is open when this function is called, but this function does not  ° d ONLN dà – ~ ‹ Ô ( Ÿ ~open the original keyboar ¿ ° d ONLN d° –  ‹$ )rd that was r f† ° d ONLN d≠ –$ ‹H )4eplaced.      	 ° d ONLN d∂ Î ~ ı ë ( Ú ~Note        
 ° d ONLN dª ˜ ~l *6This function exists only in the Newton 2.0 platform ﬁ T† ° d ONLN dÚ ˜mæ )Ôle and works only  ° d ONLN d ~ Ÿ ( ~on Newton 2.0 units.  ,  Zapf Dingbats     ‡ ° d ONLN d ﬂ ‰ )au   
( <-
 4) <-
 p * ~*
* ~*
  
ˇ·ˇ‚7Ç      
 ° d ONLN d ~( Í (& ~RegNamesRouteScript   ‡ (&0        ° d ONLN d1/ ~: ı (8 ~RegNamesRouteScript(      xÄ ° d ONLN dE/ ˆ; )xsymbol      ˚‡ ° d ONLN dK/: ),      ˚  ° d ONLN dM/;e )routeScriptFrame      C@ ° d ONLN d]/f:k )H)    ° d ONLN d_A ~M Ï (J ~Adds an application-deﬁ ä  ° d ONLN dwA ÏM8 )nned action to the  YÄ ° d ONLN dâA8MÁ )L'Action picker in the Names application.    ° d ONLN d±S ~_ ö (\ ~symbol     ° d ONLN d∏S ⁄_ · )\A  ∫† ° d ONLN dπS ·_• ), unique symbol identifying the action you ar p¿ ° d ONLN dÂS¶_— )≈
e adding.    ° d ONLN dÔS“_ÿ ),Y  Õ† ° d ONLN dS◊_ )
ou should  ° d ONLN d˙` ⁄li (i ⁄append your developer signatur  ø@ ° d ONLN d`ilî )è
e to ensur ‰‡ ° d ONLN d"`îlÓ )+e that this symbol is  ° d ONLN d8m ⁄y ˚ (v ⁄unique.   ° d ONLN d@ ~ã ≈ (à ~routeScriptFrame     ° d ONLN dQ ⁄ã · )\A  ∫† ° d ONLN dR ·ãD ) frame describing the r  @ ° d ONLN diEã» )douting action, as described in   :` ° d ONLN dà…ãÔ )ÑChapter  £Ä ° d ONLN dêÔã˘ )&2,   ° d ONLN dìå ⁄ò3 (ï ⁄“Routing Interface,”  Ú  ° d ONLN dßå3ò@ )Y of    ªÄ ° d ONLN d´åAòm )	Newton Pr  CÄ ° d ONLN d¥ånòó )-ogrammer ª¿ ° d ONLN dºåóòô ))’  ˆ` ° d ONLN dΩåôò )s Guide: Communications     ‹  ° d ONLN d‘åò )i.  ° d ONLN d÷ô ⁄• · (¢ ⁄A ∫† ° d ONLN d◊ô ·•ú )) summary of this frame is described below  ™@ ° d ONLN d ôú•û )ª.  ° d ONLN d´ ~∑ ï (¥ ~The r Ä¿ ° d ONLN d´ ï∑6 )%eturn value of this function is undeﬁ  ∏  ° d ONLN d-´6∑n )°ned; do not r  N@ ° d ONLN d:´o∑ï )9
ely on it. ° d ONLN dEΩ ~… è (∆ ~Her `  ° d ONLN dHΩ è… Ì )e’s a summary of the     ¬Ä ° d ONLN d]Ω Ì…4 )^routeScriptFrame    
† ° d ONLN dmΩ5…g )H parameter:    ° d ONLN dy‘ ~ﬂ É (› ~{ ° d ONLN d{‚ ~Ì ß *title:       }` ° d ONLN dÇ‚ ®Ó ¿ )*string      Ó‡ ° d ONLN dà‚ ¿Ì ≈ ),  ° d ONLN dê‚ ¸Ì© )<// string name of picker item  ° d ONLN dÆ ~˚ ° (˘ ~icon:       }¿ ° d ONLN d¥ ¢¸ ◊ )$bitmap object       @ ° d ONLN d¡ ÿ˚ › )6,  ° d ONLN d… ¸˚Ö )$// icon for picker item  ° d ONLN d·˛ ~	 À ( ~RouteScript:      {  ° d ONLN dÓ˛ Ã
 Ë )Nsymbol      ˛Ä ° d ONLN dÙ˛ Ë	 Ì ),  ° d ONLN d¸˛ ¸	” )$// func called if this action chosen ° d ONLN d! ~ ø ( ~appSymbol:      {‡ ° d ONLN d, ¿ ‹ )Bsymbol      ˇ@ ° d ONLN d2 ‹ · ),  ° d ONLN d: ¸” ) $// symbol for context of RouteScript ° d ONLN d_ ~% π (# ~
GetTitle:       |@ ° d ONLN di ∫& ‹ )<function      ° d ONLN dx ¸%¡ )B!// supplied instead of title slot  ° d ONLN dö( ~3 è (1 ~... ° d ONLN d§( ¸3µ )~// other slots used by your app  ° d ONLN dƒ6 ~A É (? ~}   ° d ONLN d∆N ~Z è *Her  `  ° d ONLN d…N èZ	 )e’s an example of using the    ≠` ° d ONLN dÂN	Yz )zRegNamesRouteScript    ¶@ ° d ONLN d¯N{Z• )r
 function:   ° d ONLN de ~pŸ (n ~:call kRegNamesRouteScriptFunc with ('|EntryDumper:PIEDTS|,  ° d ONLN d?s ê~ ï +{ ° d ONLN dAs ¢~I )GetTitle: func(target) begin ° d ONLN daÅ ¥åª +,if GetTargetCursor(target, nil):entry() then  ° d ONLN díè ∆ö +"Dump entry"; ° d ONLN d£ù ¥® À (¶ ¥else  ° d ONLN d¨´ ∆∂ › +nil;  ~Ä ° d ONLN d±´ ﬁ∂« )'// no selections, so don't show in list  ˇb    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  Z \( 4⁄ ú˙( ,  	Helvetica    	 .     (‡ úMiscellaneous ,  Palatino       
 ﬁ` (‡1 )1  4 ^ Z¿( , 
 Courier      ° d ONLN d   \ ¿ g ◊ ( e ¿end,  ° d ONLN d  j ¿ u ˚ *
icon: nil, ° d ONLN d  x ¿ É¡ *+RouteScript: func(target, targetView) begin  ° d ONLN d C Ü “ ë« +)local curs:=GetTargetCursor(target, nil); ° d ONLN d p î “ üa *local e := curs:Entry(); ° d ONLN d å ¢ “ ≠1 *while e do begin ° d ONLN d ° ∞ ‰ ª +	print(e); ° d ONLN d Ø æ ‰ …= *e:=curs:Next();  ° d ONLN d ¬ Ã “ ◊ È ( ’ “end;  ° d ONLN d … ⁄ ¿ Â — ( „ ¿end ° d ONLN d Œ Ë Æ Û ø ( Ò Æ});      	 ° d ONLN d “ ú Ø ( úNote        
 ° d ONLN d ◊ úä *6This function exists only in the Newton 2.0 platform ﬁ T† ° d ONLN dã‹ )Ôle and works only  ° d ONLN d  ú( ˜ (% úon Newton 2.0 units.  ,  Zapf Dingbats     ‡ ° d ONLN d5 ˝' )au   
A ZF( 4B ZF( p C úC(C úC(  
ˇ·ˇ‚7Ç      
 ° d ONLN d86 úA (? úUnRegNamesRouteScript   ‡ (?"0        ° d ONLN dOH úS (Q úUnRegNamesRouteScript(      w¿ ° d ONLN deH T< )Ñsymbol      ˚  ° d ONLN dkH<SA ))    ° d ONLN dmZ úf (c úRemoves an application-deﬁ  º@ ° d ONLN dàZfQ )~ned action fr  m¿ ° d ONLN dïZRfs )8om the   6@ ° d ONLN dúZsf% )!(Action picker in the Names application.  ° d ONLN dƒg ús Û (p úThis function only r  ©  ° d ONLN dÿg Ûse )Wemoves actions added by    ª† ° d ONLN dger– )rRegNameRouteScript   ¥‡ ° d ONLN dg—s” )l.    ° d ONLN dy úÖ ∏ (Ç úsymbol     ° d ONLN dy ¯Ö ˇ )\A  ∫† ° d ONLN dy ˇÖ¢ )% symbol identifying the action you ar  ∆  ° d ONLN d1y¢Ö≠ )£e r  ‘† ° d ONLN d4y≠Ö÷ )emoving. ° d ONLN d=ã úó ≥ (î úThe r Ä¿ ° d ONLN dBã ≥óT )%eturn value of this function is undeﬁ  ∏  ° d ONLN dhãTóå )°ned; do not r  N@ ° d ONLN duãçó≥ )9
ely on it. ° d ONLN dÄù ú© ≠ (¶ úHer `  ° d ONLN dÉù ≠©' )e’s an example of using the    ≠` ° d ONLN düù'®§ )zUnRegNamesRouteScript    •Ä ° d ONLN d¥ù•©œ )~
 function:   ° d ONLN dø¥ úø	 (Ω ú=call kUnRegNamesRouteScriptFunc with ('|EntryDumper:PIEDTS|);      	 ° d ONLN d˝– ú⁄ Ø *Note       
 ° d ONLN d‹ úËä *6This function exists only in the Newton 2.0 platform ﬁ T† ° d ONLN d9‹ãË‹ )Ôle and works only  ° d ONLN dKË úÙ ˜ (Ò úon Newton 2.0 units.      ‡ ° d ONLN d`Î ˝Û )au   
 Z( 4 Z( p  ú( ú(  
ˇ·ˇ‚7Ç      
 ° d ONLN dc ú Æ ( úSho <‡ ° d ONLN df Ø ‹ )wBusyBo  }‡ ° d ONLN dm ‹ · )-x    ‡ ("0        ° d ONLN dp ú „ ( úShowBusyBox(      {Ä ° d ONLN d| ‰  ˇ )HshowIt      Ø@ ° d ONLN dÇ ˇ ))    ° d ONLN dÑ& ú2@ (/ ú$Shows or hides the system busy icon.    ° d ONLN d©8 úD ∑ *showIt    ° d ONLN d∞8 ¯D ˇ )\A  ∫† ° d ONLN d±8 ˇDW ) Boolean that speciﬁ â  ° d ONLN d∆8XD )Y+es whether to show or hide the system busy   ° d ONLN dÒE ¯Q2 (N ¯icon. Specify     Ê† ° d ONLN dˇE2PI ):true   Â  ° d ONLN dEJQ› )" to show the busy icon until contr y¿ ° d ONLN d%EﬁQÏ )îol r † ° d ONLN d)EÌQ' )eturns to the  ° d ONLN d7R ¯^> ([ ¯system. Specify     0@ ° d ONLN dGR?]P )Gnil    /  ° d ONLN dJRQ^’ )  to hide the busy icon for the r º@ ° d ONLN djR’^ )Ñest of the curr  [  ° d ONLN dyR^" )=ent  ° d ONLN d}_ ¯ké (h ¯#iteration of the system event loop. ° d ONLN d°q ú} ≥ (z úThe r Ä¿ ° d ONLN d¶q ≥}T )%eturn value of this function is undeﬁ  ∏  ° d ONLN dÃqT}å )°ned; do not r  N@ ° d ONLN dŸqç}≥ )9
ely on it.      	 ° d ONLN d‰å úñ Ø (ì úNote        
 ° d ONLN dÈò ú§ä *6This function exists only in the Newton 2.0 platform ﬁ T† ° d ONLN d òã§‹ )Ôle and works only  ° d ONLN d2§ ú∞ ˜ (≠ úon Newton 2.0 units.      ‡ ° d ONLN dGß ˝Ø )au  ˇÓ    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 4⁄ <˙
 ,  Palatino       
 .     (‡ <12  ,  	Helvetica       	 )BSummar ° )"y of Functions 4 ^ <¿
  
 g < l
 4 h < l
 p  i ~ i
 i ~ i
  
ˇ·ˇ‚7Ç    
 ° d ONLN d   \ ~ g — ( e ~SupplantSoupDef   ‡ ( e0 , 
 Courier        ° d ONLN d  n ~ y › ( w ~SupplantSoupDef(      z  ° d ONLN d ! n ﬁ z  )`soup      ]  ° d ONLN d % n Ò y ¸ ),      \@ ° d ONLN d ' n ˝ z )newDef      y@ ° d ONLN d - n y! ))    ° d ONLN d / Ä ~ å â ( â ~Cr  \  ° d ONLN d 1 Ä â å ± )
eates or r õ¿ ° d ONLN d ; Ä ± å )(eplaces the soup deﬁ “  ° d ONLN d P Ä åu )\nition frame for a soup.   ° d ONLN d i í ~ û ê ( õ ~soup     ° d ONLN d n í ⁄ û · )\A  ∫† ° d ONLN d o í · û ) soup object.    ° d ONLN d } § ~ ∞ ù ( ≠ ~newDef     ° d ONLN d Ñ § ⁄ ∞+ )\The new soup deﬁ [† ° d ONLN d ï §, ∞„ )R*nition frame you want to set for the soup. ° d ONLN d ¿ ∂ ~ ¬ ï ( ø ~The r Ä¿ ° d ONLN d ≈ ∂ ï ¬6 )%eturn value of this function is undeﬁ  ∏  ° d ONLN d Î ∂6 ¬n )°ned; do not r  N@ ° d ONLN d ¯ ∂o ¬ï )9
ely on it.      	 ° d ONLN d — ~ € Ü ( ÿ ~W lQ ° d ONLN d — Ü € © )ARNING       
 ° d ONLN d › ~ È ‹ ( Ê ~Changing a soup deﬁ ?† ° d ONLN d  › › È4 )_nition frame is not r  ¬¿ ° d ONLN d5 ›4 Èt )Wecommended.  à† ° d ONLN dA ›u È{ )AY  I  ° d ONLN dB ›{ Èª )ou should use  ° d ONLN dP È ~ ı] ( Ú ~2this function only if you know exactly what you ar  “† ° d ONLN dÇ È] ıØ )ﬂe doing and know   ° d ONLN dì ı ~ Ê ( ˛ ~that it will not cause err  Ä ° d ONLN d≠ ı ÁV )iors or undesirable side ef 0‡ ° d ONLN d« ıV∑ )ofects. Some situations   ° d ONLN dﬁ ~ î (
 ~wher  7  ° d ONLN d‚ ï' )"e this function might be useful ar † ° d ONLN d'Ä )íe adding a soup deﬁ  Ä ° d ONLN dÅø )Znition to a 1.x  ° d ONLN d( ~ ” ( ~version soup, and r º† ° d ONLN d; ” )Uenaming a soup.  ,  Zapf Dingbats     ∞@ ° d ONLN dK!' )Ns       	 ° d ONLN dM' ~1 ë (. ~Note        
 ° d ONLN dR3 ~?l *6This function exists only in the Newton 2.0 platform ﬁ T† ° d ONLN dâ3m?æ )Ôle and works only  ° d ONLN dõ? ~K Ÿ (H ~on Newton 2.0 units.      ‡ ° d ONLN d∞B ﬂJ ‰ )au   
d <i
 4e <i
 p f ~f
f ~f
  
ˇ·ˇ‚7Ç      
 ° d ONLN d≥Y ~d ç (b ~Vie [¿ ° d ONLN d∂Y çd ∂ )wIsOpen    ‡ (b0        ° d ONLN døk ~v ø (t ~ViewIsOpen(     {‡ ° d ONLN d k ¿w “ )Bview      ^‡ ° d ONLN dŒk ”v ÿ ))    ° d ONLN d–} ~â £ (Ü ~Returns     ¬  ° d ONLN dÿ} £à ∫ )%true   ¿† ° d ONLN d‹} ªâ$ ) if the view is open and     .† ° d ONLN dı}%à6 )jnil    -Ä ° d ONLN d¯}7âe ) if it is not.   ° d ONLN dè ~õ ê (ò ~view     ° d ONLN dè ⁄õW )\The view you wish to check.  ° d ONLN d(° ~≠Ü (™ ~?Note that a view can be open but not visible (if it is hidden). ° d ONLN dh≥ ~øË *VThis function is a better way to check if a view is open, rather than checking if the    ° d ONLN dæ¿ ~À ø *viewCObject    {‡ ° d ONLN d…¿ ¿Ã Ú )B slot is non-    j† ° d ONLN d÷¿ ÛÀ )3nil    iÄ ° d ONLN dŸ¿Ã ).   
” <Ó
 4‘ <Ó
  
˛ <
 4ˇ <
 p   <   <   
ˇ·ˇ‚7Ç   ˇˇ© ˇÆ ° d ONLN d‹Î <˛ ‡ (˘ <Summary of Functions    V˛ (˘0    
         ° d ONLN dÚ ~o ( ~7This section contains a summary of all the functions pr Ë  ° d ONLN d)o› )Òovided by the platform ﬁ ´  ° d ONLN dBﬁÓ )oles,   ° d ONLN dG ~(4 (% ~'including those functions documented pr ?¿ ° d ONLN dn5(h )∑eviously in    Ç‡ ° d ONLN dzh(î )3	Newton Pr  
‡ ° d ONLN dÉï(æ )-ogrammer É  ° d ONLN dãæ(¿ ))’  Ω¿ ° d ONLN då¿( )s Guide: System  ° d ONLN dú) ~5 ù (2 ~Softwar ¯‡ ° d ONLN d£) ù5 † )e     ‹Ä ° d ONLN d§) °5 £ ).    ° d ONLN d¶B ~N Ù (K ~Infrared Communications   ° d ONLN dæR ~^ æ *IRconnectionID      J‡ ° d ONLN dÃR ø]B )A:= OpenRemoteControl() ° d ONLN d„_ ~j Ô (h ~CloseRemoteControl(     x‡ ° d ONLN dˆ_ k0 )rIRconnectionID      C¿ ° d ONLN d_1j6 )A)  ° d ONLN dl ~w (u ~SendRemoteControlCode(      w¿ ° d ONLN dlxB )ÑIRconnectionID      B† ° d ONLN d*lCwN )A,      A‡ ° d ONLN d,lOxv )command       Q‡ ° d ONLN d3lvwÅ )',      Q  ° d ONLN d5lÇxò )count       E` ° d ONLN d:lôwû ))      ° d ONLN d<Ö ~ë æ (é ~Extras Drawer      ° d ONLN dJï ~† — *GetPartCursor(     z¿ ° d ONLN dXï “°	 )TpackageName       £` ° d ONLN dcï	† )7,      ¢† ° d ONLN deï°( )store       † ° d ONLN djï)†4 ),      ‡ ° d ONLN dlï5°^ )	folderSym       -@ ° d ONLN duï^†c )))  ° d ONLN dw¢ ~≠ „ (´ ~GetPartEntryData(     y† ° d ONLN dà¢ ‰Æ ˘ )fentry       #‡ ° d ONLN dç¢ ˙≠ ˇ ))  ° d ONLN dèØ ~∫ › (∏ ~LaunchPartEntry(      z  ° d ONLN düØ ﬁª Û )`entry       $@ ° d ONLN d§Ø Ù∫ ˘ ))  ˇz    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  Z \( 4⁄ ú˙( ,  	Helvetica    	 .     (‡ úSummar  ° )"y of Functions ,  Palatino       
 (‡13  4 ^ Z¿( , 
 Courier      ° d ONLN d   \ ú g Ô ( e úSetExtrasInfo(      z¿ ° d ONLN d  \  h# )T
paramFrame      î  ° d ONLN d  \# g. )3,      ì@ ° d ONLN d  \/ hO )newInfo       X† ° d ONLN d ! \P gU )!)  ° d ONLN d # i ú t È ( r úAddExtraIcon(     {  ° d ONLN d 0 i Í u )N	extraType       ‡ ° d ONLN d 9 i t )),        ° d ONLN d ; i uR )
paramFrame      ` ° d ONLN d E iR t] )3,      † ° d ONLN d G i^ uï )packageName       F@ ° d ONLN d R iï t† )7,      EÄ ° d ONLN d T i° u¥ )store       ¥Ä ° d ONLN d Y i¥ tπ ))      ° d ONLN d [ Ç ú é ﬁ ( ã úMiscellaneous      ° d ONLN d i í ú ù1 *CardFileSafeRemoveLayout(      v† ° d ONLN d Ç í2 ûK )ñlayout      ` ° d ONLN d à íL ùQ ))  ° d ONLN d ä ü ú ™1 ( ® úGetCalendarMeetingTypes() ° d ONLN d § ¨ ú ∑= *GetCalendarMeetingTypeInfo(      u‡ ° d ONLN d ø ¨> ∏m )¢
typeSymbol      ‹@ ° d ONLN d … ¨m ∑r )/)  ° d ONLN d À π ú ƒ ı ( ¬ úGetPrinterName(     z` ° d ONLN d ⁄ π ˆ ≈+ )ZprinterFrame      ]` ° d ONLN d Ê π, ƒ1 )6)  ° d ONLN d Ë ∆ ú — ı ( œ úMissingImports(     z` ° d ONLN d ˜ ∆ ˆ “ )ZpkgRef      A  ° d ONLN d ˝ ∆ — ))  ° d ONLN d ˇ ” ú ﬁ ( ‹ úRegGlobalKeyboard(      y@ ° d ONLN d ” ﬂ4 )l	kbdSymbol       π` ° d ONLN d ”4 ﬁ? ),,      ∏† ° d ONLN d ”@ ﬂs )kbdTemplate       ˇÄ ° d ONLN d' ”s ﬁx )3)  ° d ONLN d) ‡ ú Î ( È úUnRegGlobalKeyboard(      xÄ ° d ONLN d= ‡ Ï@ )x	kbdSymbol       ∏† ° d ONLN dF ‡@ ÎE ),)  ° d ONLN dH Ì ú ¯ ( ˆ úRegNamesRouteScript(      xÄ ° d ONLN d\ Ì ˘0 )xsymbol      ˚‡ ° d ONLN db Ì0 ¯; ),      ˚  ° d ONLN dd Ì< ˘É )routeScriptFrame      C@ ° d ONLN dt ÌÑ ¯â )H)  ° d ONLN dv ˙ ú ( úUnRegNamesRouteScript(      w¿ ° d ONLN då ˙ < )Ñsymbol      ˚  ° d ONLN dí ˙<A ))  ° d ONLN dî ú „ ( úShowBusyBox(      {Ä ° d ONLN d† ‰ ˇ )HshowIt      Ø@ ° d ONLN d¶ ˇ ))  ° d ONLN d® ú ˚ ( úSupplantSoupDef(      z  ° d ONLN d∏ ¸  )`soup      ]  ° d ONLN dº ),      \@ ° d ONLN dæ : )newDef      y@ ° d ONLN dƒ:? ))  ° d ONLN d∆! ú, › (* úViewIsOpen(     {‡ ° d ONLN d—! ﬁ-  )Bview      ^‡ ° d ONLN d’! Ò, ˆ ))      ° d ONLN d◊: úF (C úFunctions Documented in     G` ° d ONLN dÔ:FE )y	Newton Pr  ∂  ° d ONLN d¯:EFq )0ogrammer @@ ° d ONLN d :sFu ).’  ©  ° d ONLN d:uF‚ )s Guide: System Softwar  Ë  ° d ONLN d:‚FÊ )me       ° d ONLN dJ úU+ (S úGetLanguageEnvironment()  ° d ONLN d3W úb ◊ *
AddLocale(     |@ ° d ONLN d=W ÿc )<theLocaleBundle       ≈  ° d ONLN dLWb )B)  ° d ONLN dNd úo › (m úFindLocale(     {‡ ° d ONLN dYd ﬁp )BtitleString       ≤¿ ° d ONLN dddo )*)  ° d ONLN dfq ú| È (z úRemoveLocale(     {  ° d ONLN dsq Í} )N	locSymbol       Û` ° d ONLN d|q| )))      ° d ONLN d~ä úñ Ù (ì úObsolete Functions     ° d ONLN dëú ú® *The following functions ar {Ä ° d ONLN d´ú®∆ )u'e supplied in the MessagePad platform ﬁ  €` ° d ONLN d”ú∆®Ï )µ
le, but ar £Ä ° d ONLN d›úÌ®& )'e obsolete in  ° d ONLN dÎ© úµ (≤ úthe Newton 2.0 platform ﬁ ü¿ ° d ONLN d©µ? )ule. They ar  ·† ° d ONLN d©?µÛ ).)e still supported in Newton 2.0 under dif  I` ° d ONLN d9©Ùµ  )µfer  +‡ ° d ONLN d<© µ )ent  ° d ONLN d@∂ ú¬ √ (ø únames (“    ˇ‡ ° d ONLN dH∂ √¡ ˛ )'
Deprecated   ¸  ° d ONLN dR∂ ˇ¬l )<” is appended), but it is r  |  ° d ONLN dm∂m¬ )n%ecommended that you do not use them.   ° d ONLN dí√ úœ$ (Ã úIn most cases, these platform ﬁ ⁄@ ° d ONLN d≤√$œç )àle functions have been r    ° d ONLN d √çœ )ieplaced by ROM functions in  ° d ONLN dÊ– ú‹ø (Ÿ úANewton 2.0, or in some cases, they no longer apply to Newton 2.0.      	 ° d ONLN d(Í úÙ ∑ *Messa  œÌ ° d ONLN d-Í ∑Ù º )g  `N ° d ONLN d.Í ΩÙ » )eP < ° d ONLN d0Í »Ù Ï )ad name  Ä ° d ONLN d8ÍOÙZ )áNe “\ ° d ONLN d:ÍZÙ≈ )wton 2.0 name (obsolete)       
 ° d ONLN dTÙ úˇ À (˝ úAddAlarm  Ä ° d ONLN d]ÙOˇ∫ )≥AddAlarmDeprecated ° d ONLN dq ú ( úClearSelectionHilites Ä ° d ONLN dáO )≥ClearSelectionHilitesDeprecated  ° d ONLN d® ú ı ( úFlushUserConfig Ä ° d ONLN d∏O‰ )≥FlushUserConfigDeprecated  ° d ONLN d”$ ú/ À (- úGetAlarm  Ä ° d ONLN d‹$O/∫ )≥GetAlarmDeprecated ° d ONLN d4 ú? ı (= úGetAppAlarmKeys Ä ° d ONLN d 4O?‰ )≥GetAppAlarmKeysDeprecated  ° d ONLN dD úO ı (M úGetDefaultStore Ä ° d ONLN d+DOO‰ )≥GetDefaultStoreDeprecated  ° d ONLN dFT ú_ È (] úGetUserConfig Ä ° d ONLN dTTO_ÿ )≥GetUserConfigDeprecated  ° d ONLN dmd úo ◊ (m ú
PtInBitMap  Ä ° d ONLN dxdOo∆ )≥PtInBitMapDeprecated ° d ONLN dét ú › (} úRegFindApps Ä ° d ONLN dötOÃ )≥RegFindAppsDeprecated  ° d ONLN d±Ñ úè › (ç úRegFormulas Ä ° d ONLN dΩÑOèÃ )≥RegFormulasDeprecated  ° d ONLN d‘î úü ˚ (ù úRegisterCardSoup  Ä ° d ONLN dÂîOüÍ )≥RegisterCardSoupDeprecated ° d ONLN d§ úØ À (≠ úRegPrefs  Ä ° d ONLN d
§OØ∫ )≥RegPrefsDeprecated ˇJ    d ˇ ˇˇˇˇ        d           
ˇ·ˇ‚7Ç 
         4  < \
 4⁄ <˙
 ,  Palatino       
 .     (‡ <14  ,  	Helvetica       	 )BSummar ° )"y of Functions 4 ^ <¿
 , 
 Courier    
 ° d ONLN d   s ~ ~ ø ( | ~RemoveAlarm Ä ° d ONLN d  s1 ~Æ )≥RemoveAlarmDeprecated  ° d ONLN d # É ~ é ◊ ( å ~RemoveAppAlarms Ä ° d ONLN d 3 É1 é∆ )≥RemoveAppAlarmsDeprecated  ° d ONLN d N ì ~ û ï ( ú ~Send  Ä ° d ONLN d S ì1 ûÑ )≥SendDeprecated ° d ONLN d c £ ~ Æ ◊ ( ¨ ~SetDefaultStore Ä ° d ONLN d s £1 Æ∆ )≥SetDefaultStoreDeprecated  ° d ONLN d é ≥ ~ æ À ( º ~SetExtrasInfo Ä ° d ONLN d ú ≥1 æ∫ )≥SetExtrasInfoDeprecated  ° d ONLN d µ √ ~ Œ À ( Ã ~SetUserConfig Ä ° d ONLN d √ √1 Œ∫ )≥SetUserConfigDeprecated  ° d ONLN d ‹ ” ~ ﬁ › ( ‹ ~SimpleTextHeight  Ä ° d ONLN d Ì ”1 ﬁÃ )≥SimpleTextHeightDeprecated ° d ONLN d	 „ ~ Ó ◊ ( Ï ~UnionSoupIsNull Ä ° d ONLN d „1 Ó∆ )≥UnionSoupIsNullDeprecated  ° d ONLN d4 Û ~ ˛ À ( ¸ ~UnRegFindApps Ä ° d ONLN dB Û1 ˛∫ )≥UnRegFindAppsDeprecated  ° d ONLN d[ ~ À ( ~UnRegFormulas Ä ° d ONLN di1∫ )≥UnRegFormulasDeprecated  ° d ONLN dÇ ~ È ( ~UnRegisterCardSoup  Ä ° d ONLN dï1ÿ )≥UnRegisterCardSoupDeprecated ° d ONLN d≥# ~. π (, ~
UnRegPrefs  Ä ° d ONLN dæ#1.® )≥UnRegPrefsDeprecated      	 ° d ONLN dˇˇ         ( p ~Messa œÌ ° d ONLN dˇˇ         )g  `N ° d ONLN dˇˇ         )eP < ° d ONLN dˇˇ         )ad name  Ä ° d ONLN dˇˇ         )áNe “\ ° d ONLN dˇˇ         )wton 2.0 name (obsolete) ˇ