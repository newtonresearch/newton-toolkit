/*	File:		NewtonQD.h	Contains:	C Interface to Quickdraw structures	Written by:	Newton Research Group*/#if !defined(__NEWTONQD_H)#define __NEWTONQD_H 1#if !defined(__NEWTONTYPES_H)#include "NewtonTypes.h"#endif#define QD_Gray 1/*---  PixelMap ---*/#define	kPixMapStorage			0xC0000000	// to mask off the appropriate bits#define	kPixMapHandle			0x00000000	// baseAddr is a handle#define	kPixMapPtr				0x40000000	// baseAddr is a pointer#define	kPixMapOffset			0x80000000	// baseAddr is an offset from the PixelMap#define	kPixMapLittleEndian	0x20000000	// pixMap is little endian#define	kPixMapAllocated		0x10000000	// pixMap "owns" the bits memory#if defined(QD_Gray)#define	kPixMapGrayTable		0x08000000	// grayTable field exists#define	kPixMapNoPad			0x04000000	// direct pixel format, no pad byte#define	kPixMapByComponent	0x02000000	// direct pixel format, stored by component#define	kPixMapAntiAlias		0x01000000	// antialiasing ink text#endif#define	kPixMapVersionMask	0x0000F000	// version of this struct#define	kPixMapDeviceType		0x00000F00	// bits 8..11 are device type code#define	kPixMapDevScreen		0x00000000	// 	screen or offscreen bitmap#define	kPixMapDevDotPrint	0x00000100	// 	dot matrix printer#define	kPixMapDevPSPrint		0x00000200	// 	postscript printer#define	kPixMapDepth			0x000000FF	// bits 0..7 are chunky pixel depth#define	kOneBitDepth			1#define	kDefaultDPI				72				// default value for deviceRes fields#define	kVersionShift			12#define	kPixMapVersion1		(0x0 << kVersionShift)#define	kPixMapVersion2		(0x1 << kVersionShift)typedef struct PixelMap{	Ptr			baseAddr;	short			rowBytes;	short			reserved1;		// pads to long	Rect			bounds;	ULong			pixMapFlags;	Point			deviceRes;		// resolution of input device (0 indicates kDefaultDPI#if defined(QD_Gray)	UChar *		grayTable;		// gray tone table#endif} PixelMap;typedef PixelMap * PixelMapPtr;#if defined(__cplusplus)#if defined(QD_Gray)inline long GrayTableExists(const PixelMap * pixmap)	{ return pixmap->pixMapFlags & kPixMapGrayTable; }inline long NoPadByte(const PixelMap * pixmap)			{ return pixmap->pixMapFlags & kPixMapNoPad; }inline long ByComponent(const PixelMap * pixmap)		{ return pixmap->pixMapFlags & kPixMapByComponent; }inline long AntiAlias(const PixelMap * pixmap)			{ return pixmap->pixMapFlags & kPixMapAntiAlias; }inline long PixelDepth(const PixelMap * pixmap)			{ return pixmap->pixMapFlags & kPixMapDepth; }#elseinline long PixelDepth(PixelMap * /*pixmap*/)			{ return kOneBitDepth; }#endifinline ULong IsPixMap(long rowBytes) 						{ return (rowBytes & 0x8000); }inline ULong GetPixMapVersion(const PixelMap * p)		{ return (p->pixMapFlags & kPixMapVersionMask); }extern "C" {#endifextern Ptr	GetPixelMapBits(PixelMap * pixmap);#if defined(__cplusplus)}#endif/*---  Patterns ---*/typedef	PixelMap **	PatternHandle;						// patterns expressed as handle to PixelMapenum{	whitePat,	ltGrayPat,	grayPat,	dkGrayPat,	blackPat};typedef unsigned char GetPatSelector;#define	kPatternDataSize 		8						// number of pixels in square pattern definition#define	kExpPatArraySize		16						// number of longs in expanded pattern array#define	kExpPatArrayMask		kExpPatArraySize - 1/*----- QuickDraw structures -----*/typedef short	StructSizeType;typedef Fixed			fixed;typedef FixedPoint	point;typedef struct curve{	point 	first;	point 	control;	point 	last;} curve;typedef curve * curvePtr;typedef struct path{	long		vectors;	long		controlBits[1];	point		vector[];} path;typedef struct paths{	long		contours;	path		contour[];} paths;typedef paths * pathsPtr, ** pathsHandle;typedef struct pathWalker{	int		isLine;	curve		c;	/* private */	long		index;	long		ep;	long *	bits;	point *	p;} pathWalker;typedef struct RoundRect{	Rect	rect;	short	hRadius;	short	vRadius;} RoundRect;typedef struct Wedge{	Rect	rect;	short	arc1;	short	arc2;} Wedge;#if !defined(__QUICKDRAW__)typedef struct FontInfo{	long		ascent;	long		descent;	long		widMax;	long		leading;} FontInfo;typedef struct PenState{	Point		pnLoc;	Point		pnSize;	short		pnMode;	PatternHandle	fgPat;} PenState;typedef struct Region{	StructSizeType	rgnSize;	Rect				rgnBBox;} Region;typedef Region * RgnPtr, ** RgnHandle;typedef struct Picture{	StructSizeType	picSize;	Rect				picFrame;} Picture;typedef Picture * PicPtr, ** PicHandle;typedef struct Polygon{	StructSizeType	polySize;	Rect				polyBBox;	Point				polyPoints[];} Polygon;typedef Polygon * PolyPtr, ** PolyHandle;/*--- Standard Procs ---*/enum{	/* Source transfer modes */	srcCopy,	srcOr,	srcXor,	srcBic,	notSrcCopy,	notSrcOr,	notSrcXor,	notSrcBic,	/* Pattern transfer modes */	patCopy,	patOr,	patXor,	patBic,	notPatCopy,	notPatOr,	notPatXor,	notPatBic};enum{	frame,	paint,	erase,	invert,	fill};typedef unsigned char GrafVerb;typedef void (*ArcProcPtr) (GrafVerb , Rect *, long , long );typedef void (*BitsProcPtr) (PixelMap *, Rect *, Rect *, long , RgnHandle );typedef void (*CurveProcPtr) (GrafVerb , curve * );typedef void (*GetPicDataProc) (Ptr , long );typedef void (*LineProcPtr) (Point );typedef void (*OvalProcPtr) (GrafVerb ,Rect *);typedef void (*PathsProcPtr) (GrafVerb , pathsHandle );typedef void (*PicCommentProc) (short ,short ,Handle );typedef void (*PolyProcPtr) (GrafVerb ,PolyHandle );typedef void (*PutPicDataProc) (Ptr , long );typedef void (*RectProcPtr) (GrafVerb ,Rect *);typedef void (*RgnProcPtr) (GrafVerb , RgnHandle );typedef void (*RRectProcPtr) (GrafVerb , Rect *, long , long );typedef void (*TextObjProc) (/*TextObjectRef*/ long , Fixed , Fixed );typedef struct QDProcs{	ArcProcPtr			arcProc;	BitsProcPtr			bitsProc;	CurveProcPtr 		curveProc;	GetPicDataProc		getPicProc;	LineProcPtr			lineProc;	OvalProcPtr			ovalProc;	PathsProcPtr 		pathsProc;	PicCommentProc		commentProc;	PolyProcPtr			polyProc;	PutPicDataProc		putPicProc;	RectProcPtr			rectProc;	RgnProcPtr			rgnProc;	RRectProcPtr		rRectProc;	TextObjProc			textProc;} QDProcs;typedef QDProcs * QDProcsPtr;typedef struct GrafPort{	PixelMap			portBits;	Rect				portRect;	RgnHandle		visRgn;	RgnHandle		clipRgn;	PatternHandle	fgPat;	PatternHandle	bgPat;	Point				pnLoc;	Point				pnSize;	short				pnMode;	short				pnVis;	QDProcsPtr		grafProcs;	Handle			picSave;		/* used for saving picts		*/	Handle			rgnSave;		/* used for saving rgns			*/	Handle			polySave;	/* used for saving polys		*/	Point				patAlign;	/* used for picture playback	*/} GrafPort;typedef GrafPort * GrafPtr;#if defined(__cplusplus)inline long	IsPrinterPort(const GrafPtr port)				{ return port->portBits.pixMapFlags & (kPixMapDevDotPrint + kPixMapDevPSPrint); }#endif#endif	/* __QUICKDRAW__ */#endif	/* __NEWTONQD_H */